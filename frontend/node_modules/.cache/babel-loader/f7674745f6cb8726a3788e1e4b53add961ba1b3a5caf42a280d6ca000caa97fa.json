{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\meiyoudg\\\\source\\\\repos\\\\AwareTime\\\\frontend\\\\src\\\\components\\\\TimeTable.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"aos/dist/aos.css\";\nimport \"./styles/timetable.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [\"#D766F0\", \"#10DD2F\", \"#ADD8E6\", \"#F756AC\", \"#FAA046\", \"#F576E6\", \"#33FFD7\", \"#FF3333\", \"#90EE90\", \"#E7D745\", \"#5733FF\", \"#33A1FF\", \"#A1FF33\", \"#FFFF00\", \"#F08080\", \"#FFA07A\", \"#FFB6C1\", \"#20B2AA\", \"#D8BFD8\", \"#EFEF68\"];\nconst assignColorsToTasks = tasks => {\n  const colorMap = new Map();\n  let colorIndex = 0;\n  tasks.forEach(day => {\n    day.tasks.forEach(task => {\n      if (!colorMap.has(task.name)) {\n        colorMap.set(task.name, colors[colorIndex % colors.length]);\n        colorIndex++;\n      }\n    });\n  });\n  return colorMap;\n};\nconst getWeekTasks = works => {\n  const tasksByDay = Array(7).fill(null).map((_, i) => ({\n    date: new Date(startOfWeek.getTime() + i * 24 * 60 * 60 * 1000),\n    tasks: []\n  }));\n  console.log(\"Initialized Tasks by Day:\", tasksByDay);\n  Object.values(works).flat().forEach(work => {\n    console.log(\"Processing work:\", work.name);\n    const workStartDate = new Date(work.startDate);\n    const workEndDate = new Date(work.endDate);\n    console.log(\"Work Start Date:\", workStartDate.toDateString());\n    console.log(\"Work End Date:\", workEndDate.toDateString());\n    work.subWorks.forEach(task => {\n      console.log(\"Processing task:\", task.name);\n      const {\n        repeatOption,\n        customRepeat = {},\n        startTime,\n        endTime\n      } = task;\n      const calculateDates = () => {\n        let dates = [];\n        console.log(\"Starting date calculation for task:\", task.name);\n        const taskStartDate = truncateTime(customRepeat.startDate ? new Date(customRepeat.startDate) : new Date(workStartDate));\n        const endDate = truncateTime(new Date(workEndDate));\n        console.log(\"Task Start Date:\", taskStartDate.toDateString());\n        console.log(\"Task End Date:\", endDate.toDateString());\n        const dayMapping = {\n          T2: 1,\n          T3: 2,\n          T4: 3,\n          T5: 4,\n          T6: 5,\n          T7: 6,\n          CN: 7\n        };\n        const convertedRepeatDays = (customRepeat.repeatDays || []).map(day => {\n          const mappedValue = dayMapping[day];\n          if (mappedValue === undefined) {\n            console.error(`Invalid day in repeatDays: ${day}`);\n            return null;\n          }\n          return mappedValue;\n        }).filter(day => day !== null);\n        console.log(\"Converted Repeat Days:\", convertedRepeatDays);\n        if (repeatOption === \"Không lặp lại\") {\n          const taskDate = truncateTime(new Date(workStartDate));\n          console.log(\"Task Date (Không lặp lại):\", taskDate.toDateString());\n          if (taskDate >= startOfWeek && taskDate <= endOfWeek) {\n            dates.push(taskDate);\n          }\n        } else if (repeatOption === \"Hàng ngày\") {\n          let currentDate = new Date(taskStartDate);\n          console.log(\"Processing Hàng ngày...\");\n          while (currentDate <= endDate) {\n            console.log(\"Current Date in Loop (Hàng ngày):\", currentDate.toDateString());\n            if (currentDate >= startOfWeek && currentDate <= endOfWeek) {\n              dates.push(new Date(currentDate));\n            }\n            currentDate.setDate(currentDate.getDate() + 1);\n          }\n        } else if (repeatOption === \"Tùy chỉnh\") {\n          console.log(\"Processing Tùy chỉnh...\");\n          if (customRepeat.repeatUnit === \"ngày\") {\n            let currentDate = new Date(taskStartDate);\n            console.log(\"Processing Tùy chỉnh - Ngày\");\n            while (currentDate <= endDate) {\n              console.log(\"Current Date in Loop (Tùy chỉnh - Ngày):\", currentDate.toDateString());\n              if (currentDate >= startOfWeek && currentDate <= endOfWeek) {\n                dates.push(new Date(currentDate));\n              }\n              currentDate.setDate(currentDate.getDate() + customRepeat.repeatEvery);\n            }\n          } else if (customRepeat.repeatUnit === \"tuần\") {\n            console.log(\"Processing Tùy chỉnh - Tuần\");\n            const FirstWeekStart = new Date(taskStartDate);\n            FirstWeekStart.setDate(taskStartDate.getDate() - ((taskStartDate.getDay() || 7) - 1));\n            const FirstWeekEnd = new Date(FirstWeekStart);\n            FirstWeekEnd.setDate(FirstWeekStart.getDate() + 6);\n            let weekConsiderStart = new Date(FirstWeekStart);\n            let weekConsiderEnd = new Date(FirstWeekEnd);\n            while (weekConsiderStart <= endDate) {\n              console.log(\"Processing Week:\", {\n                weekConsiderStart: weekConsiderStart.toDateString(),\n                weekConsiderEnd: weekConsiderEnd.toDateString()\n              });\n              if (weekConsiderStart <= endOfWeek && weekConsiderEnd >= startOfWeek) {\n                convertedRepeatDays.forEach(dayOfWeek => {\n                  const targetDate = new Date(weekConsiderStart);\n                  targetDate.setDate(weekConsiderStart.getDate() + (dayOfWeek - 1));\n                  console.log(\"Target Date Calculated:\", targetDate.toDateString());\n                  if (targetDate >= startOfWeek && targetDate <= endOfWeek && targetDate >= taskStartDate && targetDate <= endDate) {\n                    dates.push(targetDate);\n                    console.log(\"Added Target Date:\", targetDate.toDateString());\n                  }\n                });\n              }\n              weekConsiderStart.setDate(weekConsiderStart.getDate() + customRepeat.repeatEvery * 7);\n              weekConsiderEnd.setDate(weekConsiderEnd.getDate() + customRepeat.repeatEvery * 7);\n            }\n          } else if (customRepeat.repeatUnit === \"tháng\") {\n            console.log(\"Processing Tùy chỉnh - Tháng\");\n            if (customRepeat.repeatMonthOption === \"specificDay\") {\n              let currentDate = new Date(taskStartDate);\n              console.log(\"Task Start Date:\", taskStartDate.toDateString());\n              while (currentDate <= endDate) {\n                const targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + customRepeat.repeatEvery, taskStartDate.getDate());\n                console.log(\"Processed Target Date (Specific Day):\", targetDate.toDateString());\n                if (targetDate >= startOfWeek && targetDate <= endOfWeek && targetDate <= endDate) {\n                  dates.push(targetDate);\n                  console.log(\"Dates Added for Task (Specific Day):\", dates);\n                }\n                currentDate.setMonth(currentDate.getMonth() + customRepeat.repeatEvery);\n              }\n            } else if (customRepeat.repeatMonthOption === \"weekdayInMonth\") {\n              let currentDate = new Date(taskStartDate);\n              console.log(\"Task Start Date:\", taskStartDate.toDateString());\n              while (currentDate <= endDate) {\n                const targetMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + customRepeat.repeatEvery, 1);\n                const targetWeekday = new Date(targetMonth.getFullYear(), targetMonth.getMonth(), 1);\n                let weekCount = 0;\n                while (targetWeekday.getMonth() === targetMonth.getMonth()) {\n                  if (targetWeekday.getDay() === taskStartDate.getDay()) {\n                    weekCount++;\n                    if (weekCount === Math.ceil(taskStartDate.getDate() / 7) // Week number\n                    ) {\n                      console.log(\"Processed Target Date (Weekday in Month):\", targetWeekday.toDateString());\n                      if (targetWeekday >= startOfWeek && targetWeekday <= endOfWeek && targetWeekday <= endDate) {\n                        dates.push(new Date(targetWeekday));\n                        console.log(\"Dates Added for Task (Weekday in Month):\", dates);\n                      }\n                      break;\n                    }\n                  }\n                  targetWeekday.setDate(targetWeekday.getDate() + 1);\n                }\n                currentDate.setMonth(currentDate.getMonth() + customRepeat.repeatEvery);\n              }\n            }\n          } else if (customRepeat.repeatUnit === \"năm\") {\n            console.log(\"Processing Tùy chỉnh - Năm\");\n            let currentDate = new Date(taskStartDate);\n            console.log(\"Task Start Date:\", taskStartDate.toDateString());\n            console.log(\"Repeat Every:\", customRepeat.repeatEvery, \"năm\");\n            while (currentDate <= endDate) {\n              // Tính ngày mục tiêu bằng cách cộng khoảng cách năm\n              const targetDate = new Date(currentDate.getFullYear() + customRepeat.repeatEvery, currentDate.getMonth(), currentDate.getDate());\n              console.log(\"Processed Target Date (Yearly):\", targetDate.toDateString());\n\n              // Kiểm tra xem ngày mục tiêu có nằm trong tuần hiện tại và hợp lệ không\n              if (targetDate >= startOfWeek && targetDate <= endOfWeek && targetDate <= endDate) {\n                dates.push(targetDate);\n                console.log(\"Dates Added for Task (Yearly):\", dates);\n              }\n\n              // Cập nhật currentDate để chuẩn bị cho lần lặp kế tiếp\n              currentDate.setFullYear(currentDate.getFullYear() + customRepeat.repeatEvery);\n            }\n          }\n        }\n        console.log(\"Final Dates for Task:\", dates);\n        return dates;\n      };\n      calculateDates().forEach(date => {\n        console.log(\"Mapping Task to Date:\", date.toDateString());\n        const taskDay = tasksByDay.find(day => day.date.toDateString() === date.toDateString());\n        if (taskDay) {\n          console.log(\"Task Added to Day:\", taskDay.date.toDateString());\n          taskDay.tasks.push({\n            name: task.name,\n            startTime,\n            endTime,\n            workName: work.name,\n            tickState: true\n          });\n        }\n      });\n    });\n  });\n  console.log(\"Final Tasks by Day:\", tasksByDay);\n  return tasksByDay;\n};\nconst calculateOverlapGroups = tasks => {\n  const overlaps = [];\n  tasks.forEach((taskA, index) => {\n    const taskAStart = parseInt(taskA.startTime.split(\":\")[0]) * 60 + parseInt(taskA.startTime.split(\":\")[1]);\n    const taskAEnd = parseInt(taskA.endTime.split(\":\")[0]) * 60 + parseInt(taskA.endTime.split(\":\")[1]);\n\n    // Kiểm tra taskA giao với các task khác\n    const overlappingTasks = tasks.filter(taskB => {\n      const taskBStart = parseInt(taskB.startTime.split(\":\")[0]) * 60 + parseInt(taskB.startTime.split(\":\")[1]);\n      const taskBEnd = parseInt(taskB.endTime.split(\":\")[0]) * 60 + parseInt(taskB.endTime.split(\":\")[1]);\n      return taskAStart < taskBEnd && taskAEnd > taskBStart;\n    });\n\n    // Thêm nhóm vào danh sách overlaps\n    overlaps.push({\n      task: taskA,\n      overlappingTasks\n    });\n  });\n\n  // Cập nhật width và left cho mỗi task\n  overlaps.forEach(({\n    task,\n    overlappingTasks\n  }) => {\n    const totalInGroup = overlappingTasks.length; // Số task trùng nhau\n    overlappingTasks.forEach((t, index) => {\n      t.totalInGroup = totalInGroup;\n      t.index = index;\n    });\n  });\n  return overlaps.flatMap(({\n    overlappingTasks\n  }) => overlappingTasks);\n};\nconst TimeTable = ({\n  works\n}) => {\n  _s();\n  const truncateTime = date => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  const todayDate = truncateTime(new Date());\n  console.log(\"Today's Date:\", todayDate.toDateString());\n  const currentDay = todayDate.getDay();\n  console.log(\"Current Day:\", currentDay);\n  const startOfWeek = new Date(todayDate);\n  startOfWeek.setDate(todayDate.getDate() - (currentDay === 0 ? 6 : currentDay - 1));\n  console.log(\"Start of Week:\", startOfWeek.toDateString());\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(startOfWeek.getDate() + 6);\n  console.log(\"End of Week:\", endOfWeek.toDateString());\n  const days = [\"Thứ 2\", \"Thứ 3\", \"Thứ 4\", \"Thứ 5\", \"Thứ 6\", \"Thứ 7\", \"Chủ Nhật\"];\n  const hours = Array.from({\n    length: 24\n  }, (_, i) => `${i}:00 - ${i + 1}:00`);\n  const [isTaskListVisible, setIsTaskListVisible] = useState(false);\n  const [weekTasks, setWeekTasks] = useState([]);\n  useEffect(() => {\n    setWeekTasks(getWeekTasks(works));\n  }, [works]);\n  const calculatePosition = (startTime, endTime) => {\n    const [startHour, startMinute] = startTime.split(\":\").map(Number);\n    const [endHour, endMinute] = endTime.split(\":\").map(Number);\n    const top = startHour * 60 + startMinute;\n    const height = endHour * 60 + endMinute - top;\n    return {\n      top,\n      height\n    };\n  };\n  const [taskColors, setTaskColors] = useState(new Map());\n  const toggleTaskTick = (dayIndex, taskIndex) => {\n    const updatedTasks = [...weekTasks];\n    const task = updatedTasks[dayIndex].tasks[taskIndex];\n    task.tickState = !task.tickState; // Đổi trạng thái tick\n    setWeekTasks(updatedTasks); // Cập nhật lại state\n  };\n  useEffect(() => {\n    const tasks = getWeekTasks(works);\n    setWeekTasks(tasks);\n\n    // Gán màu cho các task\n    const colorMap = assignColorsToTasks(tasks);\n    setTaskColors(colorMap); // Lưu vào state\n  }, [works]);\n  const getFormattedDate = date => {\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    return `${day}/${month}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-form\",\n    \"data-aos\": \"zoom-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TimeTable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"view-tasklist-btn\",\n        onClick: () => setIsTaskListVisible(true),\n        children: \"View Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), isTaskListVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasklist-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasklist-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsTaskListVisible(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tasklist\",\n          children: weekTasks.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"day-tasks\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [days[index], \" (\", day.date.toLocaleDateString(\"vi-VN\"), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 19\n            }, this), day.tasks.length > 0 ? day.tasks.map((task, taskIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-item\",\n              style: {\n                backgroundColor: taskColors.get(task.name) || \"#FFFFFF\",\n                color: \"#FFFFFF\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: task.tickState,\n                onChange: () => toggleTaskTick(index, taskIndex) // Cập nhật trạng thái tick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 27\n                }, this), \" - \", task.workName, \" (\", task.startTime, \" - \", task.endTime, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 25\n              }, this)]\n            }, taskIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No tasks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timetable-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-cell time-column\",\n          children: \"Th\\u1EDDi gian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), days.map((day, index) => {\n          const currentDayDate = new Date();\n          currentDayDate.setDate(startOfWeek.getDate() + index); // Tính ngày tương ứng\n          const formattedDate = getFormattedDate(currentDayDate);\n          const isToday = new Date().toDateString() === currentDayDate.toDateString();\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `header-cell ${isToday ? \"today-highlight\" : \"\"}`,\n            style: {\n              height: \"60px\" // Tăng chiều cao để chứa thêm ngày\n            },\n            children: [day, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"date-text\",\n              children: formattedDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column time-column\",\n          children: hours.map((hour, hourIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot\",\n            children: [hour, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"atomic-slots\",\n              children: [...Array(4)].map((_, atomicIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"atomic-slot\"\n              }, atomicIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 19\n            }, this)]\n          }, hourIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), weekTasks.map((day, dayIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [hours.map((hour, hourIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-slot\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"atomic-slots\",\n              children: [...Array(4)].map((_, atomicIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"atomic-slot\"\n              }, atomicIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 21\n            }, this)\n          }, hourIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 19\n          }, this)), calculateOverlapGroups(day.tasks.filter(task => task.tickState)).map((task, taskIndex) => {\n            const {\n              top,\n              height\n            } = calculatePosition(task.startTime, task.endTime);\n            const groupWidth = task.totalInGroup > 1 ? 100 / task.totalInGroup : 100;\n            const left = task.totalInGroup > 1 ? task.index * groupWidth : 0;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-block\",\n              style: {\n                top: `${top}px`,\n                height: `${height}px`,\n                left: `${left}%`,\n                width: `calc(${groupWidth}% - 6px)`,\n                backgroundColor: taskColors.get(task.name) || \"#FFFFFF\",\n                color: \"#FFFFFF\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: \"block\",\n                  fontSize: \"0.8em\"\n                },\n                children: [task.startTime, \" - \", task.endTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 7\n              }, this)]\n            }, taskIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 5\n            }, this);\n          })]\n        }, dayIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeTable, \"UzY4h8rtvvcP+pP8ZjRH+cVGTok=\");\n_c = TimeTable;\nexport default TimeTable;\nvar _c;\n$RefreshReg$(_c, \"TimeTable\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","colors","assignColorsToTasks","tasks","colorMap","Map","colorIndex","forEach","day","task","has","name","set","length","getWeekTasks","works","tasksByDay","Array","fill","map","_","i","date","Date","startOfWeek","getTime","console","log","Object","values","flat","work","workStartDate","startDate","workEndDate","endDate","toDateString","subWorks","repeatOption","customRepeat","startTime","endTime","calculateDates","dates","taskStartDate","truncateTime","dayMapping","T2","T3","T4","T5","T6","T7","CN","convertedRepeatDays","repeatDays","mappedValue","undefined","error","filter","taskDate","endOfWeek","push","currentDate","setDate","getDate","repeatUnit","repeatEvery","FirstWeekStart","getDay","FirstWeekEnd","weekConsiderStart","weekConsiderEnd","dayOfWeek","targetDate","repeatMonthOption","getFullYear","getMonth","setMonth","targetMonth","targetWeekday","weekCount","Math","ceil","setFullYear","taskDay","find","workName","tickState","calculateOverlapGroups","overlaps","taskA","index","taskAStart","parseInt","split","taskAEnd","overlappingTasks","taskB","taskBStart","taskBEnd","totalInGroup","t","flatMap","TimeTable","_s","todayDate","currentDay","days","hours","from","isTaskListVisible","setIsTaskListVisible","weekTasks","setWeekTasks","calculatePosition","startHour","startMinute","Number","endHour","endMinute","top","height","taskColors","setTaskColors","toggleTaskTick","dayIndex","taskIndex","updatedTasks","getFormattedDate","month","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleDateString","style","backgroundColor","get","color","type","checked","onChange","currentDayDate","formattedDate","isToday","hour","hourIndex","atomicIndex","groupWidth","left","width","display","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/meiyoudg/source/repos/AwareTime/frontend/src/components/TimeTable.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"aos/dist/aos.css\";\r\nimport \"./styles/timetable.css\";\r\n\r\nconst colors = [\r\n  \"#D766F0\", \"#10DD2F\", \"#ADD8E6\", \"#F756AC\", \"#FAA046\", \"#F576E6\",\r\n  \"#33FFD7\", \"#FF3333\", \"#90EE90\", \"#E7D745\", \"#5733FF\", \"#33A1FF\",\r\n  \"#A1FF33\", \"#FFFF00\", \"#F08080\", \"#FFA07A\", \"#FFB6C1\", \"#20B2AA\",\r\n  \"#D8BFD8\", \"#EFEF68\",\r\n];\r\nconst assignColorsToTasks = (tasks) => {\r\n  const colorMap = new Map();\r\n  let colorIndex = 0;\r\n\r\n  tasks.forEach((day) => {\r\n    day.tasks.forEach((task) => {\r\n      if (!colorMap.has(task.name)) {\r\n        colorMap.set(task.name, colors[colorIndex % colors.length]);\r\n        colorIndex++;\r\n      }\r\n    });\r\n  });\r\n\r\n  return colorMap;\r\n};\r\n\r\n\r\nconst getWeekTasks = (works) => {\r\n  \r\n\r\n  const tasksByDay = Array(7)\r\n    .fill(null)\r\n    .map((_, i) => ({\r\n      date: new Date(startOfWeek.getTime() + i * 24 * 60 * 60 * 1000),\r\n      tasks: [],\r\n    }));\r\n\r\n  console.log(\"Initialized Tasks by Day:\", tasksByDay);\r\n\r\n  Object.values(works).flat().forEach((work) => {\r\n    console.log(\"Processing work:\", work.name);\r\n    const workStartDate = new Date(work.startDate);\r\n    const workEndDate = new Date(work.endDate);\r\n\r\n    console.log(\"Work Start Date:\", workStartDate.toDateString());\r\n    console.log(\"Work End Date:\", workEndDate.toDateString());\r\n\r\n    work.subWorks.forEach((task) => {\r\n      console.log(\"Processing task:\", task.name);\r\n      const { repeatOption, customRepeat = {}, startTime, endTime } = task;\r\n\r\n      const calculateDates = () => {\r\n        let dates = [];\r\n        console.log(\"Starting date calculation for task:\", task.name);\r\n\r\n        const taskStartDate = truncateTime(\r\n          customRepeat.startDate ? new Date(customRepeat.startDate) : new Date(workStartDate)\r\n        );\r\n        const endDate = truncateTime(new Date(workEndDate));\r\n\r\n        console.log(\"Task Start Date:\", taskStartDate.toDateString());\r\n        console.log(\"Task End Date:\", endDate.toDateString());\r\n\r\n        const dayMapping = { T2: 1, T3: 2, T4: 3, T5: 4, T6: 5, T7: 6, CN: 7 };\r\n        const convertedRepeatDays = (customRepeat.repeatDays || []).map((day) => {\r\n          const mappedValue = dayMapping[day];\r\n          if (mappedValue === undefined) {\r\n            console.error(`Invalid day in repeatDays: ${day}`);\r\n            return null;\r\n          }\r\n          return mappedValue;\r\n        }).filter((day) => day !== null);\r\n\r\n        console.log(\"Converted Repeat Days:\", convertedRepeatDays);\r\n\r\n        if (repeatOption === \"Không lặp lại\") {\r\n          const taskDate = truncateTime(new Date(workStartDate));\r\n          console.log(\"Task Date (Không lặp lại):\", taskDate.toDateString());\r\n          if (taskDate >= startOfWeek && taskDate <= endOfWeek) {\r\n            dates.push(taskDate);\r\n          }\r\n        } else if (repeatOption === \"Hàng ngày\") {\r\n          let currentDate = new Date(taskStartDate);\r\n          console.log(\"Processing Hàng ngày...\");\r\n          while (currentDate <= endDate) {\r\n            console.log(\"Current Date in Loop (Hàng ngày):\", currentDate.toDateString());\r\n            if (currentDate >= startOfWeek && currentDate <= endOfWeek) {\r\n              dates.push(new Date(currentDate));\r\n            }\r\n            currentDate.setDate(currentDate.getDate() + 1);\r\n          }\r\n        } else if (repeatOption === \"Tùy chỉnh\") {\r\n          console.log(\"Processing Tùy chỉnh...\");\r\n          if (customRepeat.repeatUnit === \"ngày\") {\r\n            let currentDate = new Date(taskStartDate);\r\n            console.log(\"Processing Tùy chỉnh - Ngày\");\r\n            while (currentDate <= endDate) {\r\n              console.log(\"Current Date in Loop (Tùy chỉnh - Ngày):\", currentDate.toDateString());\r\n              if (currentDate >= startOfWeek && currentDate <= endOfWeek) {\r\n                dates.push(new Date(currentDate));\r\n              }\r\n              currentDate.setDate(currentDate.getDate() + customRepeat.repeatEvery);\r\n            }\r\n          } else if (customRepeat.repeatUnit === \"tuần\") {\r\n            console.log(\"Processing Tùy chỉnh - Tuần\");\r\n            const FirstWeekStart = new Date(taskStartDate);\r\n            FirstWeekStart.setDate(taskStartDate.getDate() - ((taskStartDate.getDay() || 7) - 1));\r\n\r\n            const FirstWeekEnd = new Date(FirstWeekStart);\r\n            FirstWeekEnd.setDate(FirstWeekStart.getDate() + 6);\r\n\r\n            let weekConsiderStart = new Date(FirstWeekStart);\r\n            let weekConsiderEnd = new Date(FirstWeekEnd);\r\n\r\n            while (weekConsiderStart <= endDate) {\r\n              console.log(\"Processing Week:\", {\r\n                weekConsiderStart: weekConsiderStart.toDateString(),\r\n                weekConsiderEnd: weekConsiderEnd.toDateString(),\r\n              });\r\n              if (weekConsiderStart <= endOfWeek && weekConsiderEnd >= startOfWeek) {\r\n                convertedRepeatDays.forEach((dayOfWeek) => {\r\n                  const targetDate = new Date(weekConsiderStart);\r\n                  targetDate.setDate(weekConsiderStart.getDate() + (dayOfWeek - 1));\r\n                  console.log(\"Target Date Calculated:\", targetDate.toDateString());\r\n                  if (\r\n                    targetDate >= startOfWeek &&\r\n                    targetDate <= endOfWeek &&\r\n                    targetDate >= taskStartDate &&\r\n                    targetDate <= endDate\r\n                  ) {\r\n                    dates.push(targetDate);\r\n                    console.log(\"Added Target Date:\", targetDate.toDateString());\r\n                  }\r\n                });\r\n              }\r\n              weekConsiderStart.setDate(weekConsiderStart.getDate() + customRepeat.repeatEvery * 7);\r\n              weekConsiderEnd.setDate(weekConsiderEnd.getDate() + customRepeat.repeatEvery * 7);\r\n            }\r\n          } else if (customRepeat.repeatUnit === \"tháng\") {\r\n            console.log(\"Processing Tùy chỉnh - Tháng\");\r\n          \r\n            if (customRepeat.repeatMonthOption === \"specificDay\") {\r\n              let currentDate = new Date(taskStartDate);\r\n              console.log(\"Task Start Date:\", taskStartDate.toDateString());\r\n              while (currentDate <= endDate) {\r\n                const targetDate = new Date(\r\n                  currentDate.getFullYear(),\r\n                  currentDate.getMonth() + customRepeat.repeatEvery,\r\n                  taskStartDate.getDate()\r\n                );\r\n                console.log(\"Processed Target Date (Specific Day):\", targetDate.toDateString());\r\n          \r\n                if (targetDate >= startOfWeek && targetDate <= endOfWeek && targetDate <= endDate) {\r\n                  dates.push(targetDate);\r\n                  console.log(\"Dates Added for Task (Specific Day):\", dates);\r\n                }\r\n          \r\n                currentDate.setMonth(currentDate.getMonth() + customRepeat.repeatEvery);\r\n              }\r\n            } else if (customRepeat.repeatMonthOption === \"weekdayInMonth\") {\r\n              let currentDate = new Date(taskStartDate);\r\n              console.log(\"Task Start Date:\", taskStartDate.toDateString());\r\n              while (currentDate <= endDate) {\r\n                const targetMonth = new Date(\r\n                  currentDate.getFullYear(),\r\n                  currentDate.getMonth() + customRepeat.repeatEvery,\r\n                  1\r\n                );\r\n                const targetWeekday = new Date(\r\n                  targetMonth.getFullYear(),\r\n                  targetMonth.getMonth(),\r\n                  1\r\n                );\r\n          \r\n                let weekCount = 0;\r\n                while (targetWeekday.getMonth() === targetMonth.getMonth()) {\r\n                  if (targetWeekday.getDay() === taskStartDate.getDay()) {\r\n                    weekCount++;\r\n                    if (\r\n                      weekCount ===\r\n                      Math.ceil(taskStartDate.getDate() / 7) // Week number\r\n                    ) {\r\n                      console.log(\"Processed Target Date (Weekday in Month):\", targetWeekday.toDateString());\r\n                      if (\r\n                        targetWeekday >= startOfWeek &&\r\n                        targetWeekday <= endOfWeek &&\r\n                        targetWeekday <= endDate\r\n                      ) {\r\n                        dates.push(new Date(targetWeekday));\r\n                        console.log(\"Dates Added for Task (Weekday in Month):\", dates);\r\n                      }\r\n                      break;\r\n                    }\r\n                  }\r\n                  targetWeekday.setDate(targetWeekday.getDate() + 1);\r\n                }\r\n          \r\n                currentDate.setMonth(currentDate.getMonth() + customRepeat.repeatEvery);\r\n              }\r\n            }\r\n          }\r\n          else if (customRepeat.repeatUnit === \"năm\") {\r\n            console.log(\"Processing Tùy chỉnh - Năm\");\r\n          \r\n            let currentDate = new Date(taskStartDate);\r\n            console.log(\"Task Start Date:\", taskStartDate.toDateString());\r\n            console.log(\"Repeat Every:\", customRepeat.repeatEvery, \"năm\");\r\n          \r\n            while (currentDate <= endDate) {\r\n              // Tính ngày mục tiêu bằng cách cộng khoảng cách năm\r\n              const targetDate = new Date(\r\n                currentDate.getFullYear() + customRepeat.repeatEvery,\r\n                currentDate.getMonth(),\r\n                currentDate.getDate()\r\n              );\r\n          \r\n              console.log(\"Processed Target Date (Yearly):\", targetDate.toDateString());\r\n          \r\n              // Kiểm tra xem ngày mục tiêu có nằm trong tuần hiện tại và hợp lệ không\r\n              if (\r\n                targetDate >= startOfWeek &&\r\n                targetDate <= endOfWeek &&\r\n                targetDate <= endDate\r\n              ) {\r\n                dates.push(targetDate);\r\n                console.log(\"Dates Added for Task (Yearly):\", dates);\r\n              }\r\n          \r\n              // Cập nhật currentDate để chuẩn bị cho lần lặp kế tiếp\r\n              currentDate.setFullYear(currentDate.getFullYear() + customRepeat.repeatEvery);\r\n            }\r\n          }\r\n          \r\n          \r\n        }\r\n\r\n        console.log(\"Final Dates for Task:\", dates);\r\n        return dates;\r\n      };\r\n\r\n      calculateDates().forEach((date) => {\r\n        console.log(\"Mapping Task to Date:\", date.toDateString());\r\n        const taskDay = tasksByDay.find(\r\n          (day) => day.date.toDateString() === date.toDateString()\r\n        );\r\n        if (taskDay) {\r\n          console.log(\"Task Added to Day:\", taskDay.date.toDateString());\r\n          taskDay.tasks.push({\r\n            name: task.name,\r\n            startTime,\r\n            endTime,\r\n            workName: work.name,\r\n            tickState: true, \r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  console.log(\"Final Tasks by Day:\", tasksByDay);\r\n  return tasksByDay;\r\n};\r\nconst calculateOverlapGroups = (tasks) => {\r\n  const overlaps = [];\r\n\r\n  tasks.forEach((taskA, index) => {\r\n    const taskAStart = parseInt(taskA.startTime.split(\":\")[0]) * 60 + parseInt(taskA.startTime.split(\":\")[1]);\r\n    const taskAEnd = parseInt(taskA.endTime.split(\":\")[0]) * 60 + parseInt(taskA.endTime.split(\":\")[1]);\r\n\r\n    // Kiểm tra taskA giao với các task khác\r\n    const overlappingTasks = tasks.filter((taskB) => {\r\n      const taskBStart = parseInt(taskB.startTime.split(\":\")[0]) * 60 + parseInt(taskB.startTime.split(\":\")[1]);\r\n      const taskBEnd = parseInt(taskB.endTime.split(\":\")[0]) * 60 + parseInt(taskB.endTime.split(\":\")[1]);\r\n\r\n      return taskAStart < taskBEnd && taskAEnd > taskBStart;\r\n    });\r\n\r\n    // Thêm nhóm vào danh sách overlaps\r\n    overlaps.push({ task: taskA, overlappingTasks });\r\n  });\r\n\r\n  // Cập nhật width và left cho mỗi task\r\n  overlaps.forEach(({ task, overlappingTasks }) => {\r\n    const totalInGroup = overlappingTasks.length; // Số task trùng nhau\r\n    overlappingTasks.forEach((t, index) => {\r\n      t.totalInGroup = totalInGroup;\r\n      t.index = index;\r\n    });\r\n  });\r\n\r\n  return overlaps.flatMap(({ overlappingTasks }) => overlappingTasks);\r\n};\r\n\r\n\r\nconst TimeTable = ({ works }) => {\r\n  const truncateTime = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n\r\n  const todayDate = truncateTime(new Date());\r\n  console.log(\"Today's Date:\", todayDate.toDateString());\r\n\r\n  const currentDay = todayDate.getDay();\r\n  console.log(\"Current Day:\", currentDay);\r\n\r\n  const startOfWeek = new Date(todayDate);\r\n  startOfWeek.setDate(todayDate.getDate() - (currentDay === 0 ? 6 : currentDay - 1));\r\n  console.log(\"Start of Week:\", startOfWeek.toDateString());\r\n\r\n  const endOfWeek = new Date(startOfWeek);\r\n  endOfWeek.setDate(startOfWeek.getDate() + 6);\r\n  console.log(\"End of Week:\", endOfWeek.toDateString());\r\n  \r\n  const days = [\"Thứ 2\", \"Thứ 3\", \"Thứ 4\", \"Thứ 5\", \"Thứ 6\", \"Thứ 7\", \"Chủ Nhật\"];\r\n  const hours = Array.from({ length: 24 }, (_, i) => `${i}:00 - ${i + 1}:00`);\r\n\r\n  const [isTaskListVisible, setIsTaskListVisible] = useState(false);\r\n  const [weekTasks, setWeekTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setWeekTasks(getWeekTasks(works));\r\n  }, [works]);\r\n\r\n  const calculatePosition = (startTime, endTime) => {\r\n    const [startHour, startMinute] = startTime.split(\":\").map(Number);\r\n    const [endHour, endMinute] = endTime.split(\":\").map(Number);\r\n    const top = startHour * 60 + startMinute;\r\n    const height = (endHour * 60 + endMinute) - top;\r\n    return { top, height };\r\n  };\r\n\r\n  const [taskColors, setTaskColors] = useState(new Map());\r\n\r\n  const toggleTaskTick = (dayIndex, taskIndex) => {\r\n    const updatedTasks = [...weekTasks];\r\n    const task = updatedTasks[dayIndex].tasks[taskIndex];\r\n    task.tickState = !task.tickState; // Đổi trạng thái tick\r\n    setWeekTasks(updatedTasks); // Cập nhật lại state\r\n  };\r\n  \r\n\r\nuseEffect(() => {\r\n  const tasks = getWeekTasks(works);\r\n  setWeekTasks(tasks);\r\n\r\n  // Gán màu cho các task\r\n  const colorMap = assignColorsToTasks(tasks);\r\n  setTaskColors(colorMap); // Lưu vào state\r\n}, [works]);\r\n\r\nconst getFormattedDate = (date) => {\r\n  const day = date.getDate();\r\n  const month = date.getMonth() + 1;\r\n  return `${day}/${month}`;\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"main-form\" data-aos=\"zoom-in\">\r\n      <header className=\"search-bar\">\r\n        <h1>TimeTable</h1>\r\n        <button\r\n          className=\"view-tasklist-btn\"\r\n          onClick={() => setIsTaskListVisible(true)}\r\n        >\r\n          View Task List\r\n        </button>\r\n      </header>\r\n\r\n      {isTaskListVisible && (\r\n        <div className=\"tasklist-overlay\">\r\n          <div className=\"tasklist-container\">\r\n            <button\r\n              className=\"close-btn\"\r\n              onClick={() => setIsTaskListVisible(false)}\r\n            >\r\n              Close\r\n            </button>\r\n            <div className=\"tasklist\">\r\n              {weekTasks.map((day, index) => (\r\n                <div key={index} className=\"day-tasks\">\r\n                  <h3>\r\n                    {days[index]} ({day.date.toLocaleDateString(\"vi-VN\")})\r\n                  </h3>\r\n                  {day.tasks.length > 0 ? (\r\n                    day.tasks.map((task, taskIndex) => (\r\n                      <div\r\n                        key={taskIndex}\r\n                        className=\"task-item\"\r\n                        style={{\r\n                          backgroundColor: taskColors.get(task.name) || \"#FFFFFF\",\r\n                          color: \"#FFFFFF\",\r\n                        }}\r\n                      >\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          checked={task.tickState}\r\n                          onChange={() => toggleTaskTick(index, taskIndex)} // Cập nhật trạng thái tick\r\n                        />\r\n                        <p>\r\n                          <strong>{task.name}</strong> - {task.workName} ({task.startTime} - {task.endTime})\r\n                        </p>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p>No tasks</p>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n        <div className=\"timetable-container\">\r\n        <div className=\"header-row\">\r\n          <div className=\"header-cell time-column\">Thời gian</div>\r\n          {days.map((day, index) => {\r\n            const currentDayDate = new Date();\r\n            currentDayDate.setDate(startOfWeek.getDate() + index); // Tính ngày tương ứng\r\n            const formattedDate = getFormattedDate(currentDayDate);\r\n            const isToday = new Date().toDateString() === currentDayDate.toDateString();\r\n          \r\n            return (\r\n              <div\r\n                key={index}\r\n                className={`header-cell ${isToday ? \"today-highlight\" : \"\"}`}\r\n                style={{\r\n                  height: \"60px\", // Tăng chiều cao để chứa thêm ngày\r\n                }}\r\n              >\r\n                {day}\r\n                <br />\r\n                <span className=\"date-text\">{formattedDate}</span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n            \r\n          <div className=\"body-container\">\r\n            {/* Render cột mốc thời gian */}\r\n            <div className=\"column time-column\">\r\n              {hours.map((hour, hourIndex) => (\r\n                <div key={hourIndex} className=\"time-slot\">\r\n                  {hour}\r\n                  {/* Thêm atomic-slots */}\r\n                  <div className=\"atomic-slots\">\r\n                    {[...Array(4)].map((_, atomicIndex) => (\r\n                      <div key={atomicIndex} className=\"atomic-slot\"></div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n                    \r\n            {/* Render cột các ngày trong tuần */}\r\n            {weekTasks.map((day, dayIndex) => (\r\n              <div key={dayIndex} className=\"column\">\r\n                {hours.map((hour, hourIndex) => (\r\n                  <div key={hourIndex} className=\"time-slot\">\r\n                    {/* Thêm atomic-slots */}\r\n                    <div className=\"atomic-slots\">\r\n                      {[...Array(4)].map((_, atomicIndex) => (\r\n                        <div key={atomicIndex} className=\"atomic-slot\"></div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n\r\n                {/* Render task trong ngày */}\r\n                {calculateOverlapGroups(day.tasks.filter(task => task.tickState)).map((task, taskIndex) => {\r\n  const { top, height } = calculatePosition(task.startTime, task.endTime);\r\n  const groupWidth = task.totalInGroup > 1 ? 100 / task.totalInGroup : 100;\r\n  const left = task.totalInGroup > 1 ? task.index * groupWidth : 0;\r\n\r\n  return (\r\n    <div\r\n      key={taskIndex}\r\n      className=\"task-block\"\r\n      style={{\r\n        top: `${top}px`,\r\n        height: `${height}px`,\r\n        left: `${left}%`,\r\n        width: `calc(${groupWidth}% - 6px)`,\r\n        backgroundColor: taskColors.get(task.name) || \"#FFFFFF\",\r\n        color: \"#FFFFFF\",\r\n      }}\r\n    >\r\n      <span>{task.name}</span>\r\n      <span style={{ display: \"block\", fontSize: \"0.8em\" }}>\r\n        {task.startTime} - {task.endTime}\r\n      </span>\r\n    </div>\r\n  );\r\n})}\r\n\r\n\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}