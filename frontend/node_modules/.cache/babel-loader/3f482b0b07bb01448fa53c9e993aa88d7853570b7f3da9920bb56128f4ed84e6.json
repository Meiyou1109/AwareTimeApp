{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\meiyoudg\\\\source\\\\repos\\\\AwareTime\\\\frontend\\\\src\\\\components\\\\Focus.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\nimport \"./styles/focus.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Focus = ({\n  works = {},\n  toast\n}) => {\n  _s();\n  var _currentTaskManual$st, _currentTaskManual$en;\n  const [mode, setMode] = useState(\"auto\");\n  const [selectedWork, setSelectedWork] = useState(null);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [currentTaskManual, setCurrentTaskManual] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [tempWork, setTempWork] = useState(null);\n  const [tempTask, setTempTask] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(1500);\n  const [isRunning, setIsRunning] = useState(false);\n  const [cycle, setCycle] = useState(0);\n  const [isFocusPhase, setIsFocusPhase] = useState(true);\n  const [tasksForToday, setTasksForToday] = useState([]);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const timelineRef = useRef(null); // Ref để truy cập timeline-container\n  // const [selectedTaskBlock, setSelectedTaskBlock] = useState(null);\n  const [selectedTaskName, setSelectedTaskName] = useState(null);\n  const [noteContent, setNoteContent] = useState(\"\");\n  const [isFreeMode, setIsFreeMode] = useState(false); // Thêm trạng thái cho chế độ tự do\n  const [freeModeTime, setFreeModeTime] = useState(0); // Thời gian đếm giờ tự do\n  const [currentMode, setCurrentMode] = useState(\"pomodoro\"); // Lưu chế độ hiện tại\n  const [countdownTimeTask, setCountdownTimeTask] = useState(0); // Thời gian đếm ngược\n  const [isTaskSelected, setIsTaskSelected] = useState(false); // Trạng thái task được chọn\n  const [todayDataTimeCount, setTodayDataTimeCount] = useState([]);\n  const [isTodayDataVisible, setIsTodayDataVisible] = useState(false); // Định nghĩa biến\n  const [lastTaskStartTime, setLastTaskStartTime] = useState(null);\n  const intervalRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"byTime\");\n  // Add state for AutoSelect\n  const [isAutoSelectEnabled, setIsAutoSelectEnabled] = useState(false);\n  const [selectedTasksManual, setSelectedTasksManual] = useState([]);\n  const [currentRecord, setCurrentRecord] = useState(null); // Record hiện tại đang được đếm\n  const [records, setRecords] = useState([]); // Danh sách tất cả các record\n  const [recordCounter, setRecordCounter] = useState(0); // Đếm số lượng record\n\n  const [recordNameInput, setRecordNameInput] = useState(\"\"); // Tên record nhập vào\n  const totalFreeTime = useMemo(() => {\n    // Tổng thời gian của tất cả các record\n    return records.reduce((total, record) => total + record.time, 0);\n  }, [records]);\n  const toggleFreeMode = () => {\n    if (isFreeMode) {\n      // Chuyển về chế độ Pomodoro\n      setIsFreeMode(false);\n      setFreeModeTime(0); // Reset thời gian tự do\n      setTimeLeft(isFocusPhase ? 1500 : timeLeft); // Quay về thời gian Pomodoro\n    } else {\n      // Chuyển sang chế độ tự do\n      setIsFreeMode(true);\n      setFreeModeTime(0); // Reset bộ đếm tự do về 0\n      setIsRunning(false); // Dừng đếm tự do\n    }\n  };\n  useEffect(() => {\n    if (timeLeft === 0) {\n      if (currentMode === \"pomodoro\") {\n        setPomodoroCount(prevCount => {\n          const newCount = prevCount + 1;\n          if (newCount % 4 === 0) {\n            setCurrentMode(\"long-break\");\n            setTimeLeft(900); // Long Break - 15 phút\n          } else {\n            setCurrentMode(\"short-break\");\n            setTimeLeft(300); // Short Break - 5 phút\n          }\n          return newCount;\n        });\n      } else if (currentMode === \"short-break\" || currentMode === \"long-break\") {\n        setCurrentMode(\"pomodoro\");\n        setTimeLeft(1500); // Pomodoro - 25 phút\n      }\n    }\n  }, [timeLeft, currentMode]);\n\n  // Chu kỳ Pomodoro\n  const handlePomodoroComplete = useCallback(() => {\n    setIsRunning(false);\n    if (isFocusPhase) {\n      setIsFocusPhase(false);\n      setCycle(prev => prev + 1);\n      if ((cycle + 1) % 4 === 0) {\n        setTimeLeft(900);\n        toast.info(\"Long Break! Take a 15-minute rest.\");\n      } else {\n        setTimeLeft(300);\n        toast.info(\"Short Break! Take a 5-minute rest.\");\n      }\n    } else {\n      setIsFocusPhase(true);\n      setTimeLeft(1500);\n      toast.success(\"Back to Focus! 25 minutes.\");\n    }\n  }, [cycle, isFocusPhase, toast]);\n\n  // Quản lý realTimeTaskCount khi đồng hồ chạy\n  useEffect(() => {\n    if (!isRunning || !selectedTaskName || currentMode !== \"pomodoro\") {\n      clearInterval(intervalRef.current);\n      return;\n    }\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      setTodayDataTimeCount(prev => prev.map(task => {\n        if (task.name === selectedTaskName) {\n          const updatedRealTime = task.realTimeTaskCount + 1;\n          const percentCompleted = Math.floor(updatedRealTime / task.totalTimeSlotInSeconds * 100);\n          return {\n            ...task,\n            realTimeTaskCount: updatedRealTime,\n            status: `${percentCompleted}%` // Cập nhật phần trăm hoàn thành\n          };\n        }\n        return task;\n      }));\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [isRunning, selectedTaskName, currentMode]);\n\n  //realtime của manual\n  useEffect(() => {\n    if (!isRunning || mode !== \"manual\" || !currentTaskManual) return;\n    const timer = setInterval(() => {\n      setSelectedTasksManual(prev => {\n        const existingTask = prev.find(task => task.name === currentTaskManual.name);\n        if (existingTask) {\n          return prev.map(task => task.name === currentTaskManual.name ? {\n            ...task,\n            time: task.time + 1\n          } : task);\n        } else {\n          return [...prev, {\n            name: currentTaskManual.name,\n            time: 1\n          }];\n        }\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [isRunning, mode, currentTaskManual]);\n  const totalRealTime = useMemo(() => {\n    // Tính tổng thời gian thực của tất cả các task\n    return todayDataTimeCount.reduce((total, task) => total + task.realTimeTaskCount, 0);\n  }, [todayDataTimeCount]);\n  const completedTaskCount = useMemo(() => {\n    // Đếm số lượng task đã hoàn thành\n    return todayDataTimeCount.filter(task => parseInt(task.status.replace('%', ''), 10) >= 100).length;\n  }, [todayDataTimeCount]);\n  const totalTasks = todayDataTimeCount.length; // Tổng số task hôm nay\n\n  // Khi bắt đầu hoặc tạm dừng\n  //test code\n  const handleStartPause = () => {\n    if (isRunning) {\n      // Dừng interval\n      clearInterval(intervalRef.current);\n      setIsRunning(false);\n    } else {\n      if (!isTaskSelected && !currentRecord) {\n        // Kiểm tra nếu không có Task và không có Record được chọn\n        toast.error(\"Please choose a task or record\");\n        return;\n      }\n      setIsRunning(true);\n      intervalRef.current = setInterval(() => {\n        if (isTaskSelected) {\n          // Đếm thời gian cho Task\n          setTodayDataTimeCount(prev => prev.map(task => task.name === selectedTaskName ? {\n            ...task,\n            realTimeTaskCount: task.realTimeTaskCount + 1\n          } : task));\n        } else if (currentRecord) {\n          // Đếm thời gian cho Record\n          setRecords(prev => prev.map(record => record.name === currentRecord.name ? {\n            ...record,\n            time: record.time + 1\n          } : record));\n        }\n      }, 1000);\n    }\n  };\n\n  // Update list todayDatatimeCount every newDay\n  useEffect(() => {\n    setTodayDataTimeCount(tasksForToday.map(task => {\n      const taskTimeSlot = calculateTimeSlot(task.startTime, task.endTime);\n      const [hours, minutes] = taskTimeSlot.split(\":\").map(Number);\n      const totalTimeSlotInSeconds = hours * 3600 + minutes * 60;\n      return {\n        name: task.name,\n        date: new Date().toDateString(),\n        realTimeTaskCount: 0,\n        // Ban đầu chưa có thời gian thực hiện\n        timeSlot: `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:00`,\n        // Định dạng hh:mm:ss\n        totalTimeSlotInSeconds,\n        // Lưu thêm tổng thời gian tính bằng giây\n        status: \"0%\" // Phần trăm hoàn thành ban đầu\n      };\n    }));\n  }, [tasksForToday]);\n  const [setPomodoroCount] = useState(0); // Số lần Pomodoro hoàn thành\n  // Skip process pomodoro\n  const handleSkip = () => {\n    if (currentMode === \"pomodoro\") {\n      setPomodoroCount(prevCount => {\n        const newCount = prevCount + 1;\n        if (newCount % 4 === 0) {\n          // Sau 3 lần nghỉ ngắn, nghỉ dài\n          setCurrentMode(\"long-break\");\n          setTimeLeft(900); // Long Break - 15 phút\n        } else {\n          setCurrentMode(\"short-break\");\n          setTimeLeft(300); // Short Break - 5 phút\n        }\n        return newCount;\n      });\n    } else if (currentMode === \"short-break\" || currentMode === \"long-break\") {\n      setCurrentMode(\"pomodoro\");\n      setTimeLeft(1500); // Pomodoro - 25 phút\n    }\n  };\n\n  // THỜI GIAN CHO COUNTDOWN TIME\n  useEffect(() => {\n    let countdownTimer;\n    if (isTaskSelected && isRunning && (currentMode === \"pomodoro\" || isFreeMode)) {\n      countdownTimer = setInterval(() => {\n        setCountdownTimeTask(prev => Math.max(prev - 1, 0)); // Đảm bảo không giảm dưới 0\n      }, 1000);\n    }\n    return () => clearInterval(countdownTimer);\n  }, [isRunning, isTaskSelected, currentMode, isFreeMode]);\n\n  // Pomodoro logic decrease timeLeft\n  useEffect(() => {\n    let timer;\n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prev => prev - 1);\n        if (currentRecord) {\n          // Đồng bộ thời gian với Record hiện tại\n          setRecords(prev => prev.map(record => record.name === currentRecord.name ? {\n            ...record,\n            time: record.time + 1\n          } : record));\n        }\n      }, 1000);\n    } else if (timeLeft === 0) {\n      handlePomodoroComplete();\n    }\n    return () => clearInterval(timer);\n  }, [isRunning, timeLeft, currentRecord]);\n\n  // Freemode count time\n  useEffect(() => {\n    let freeModeTimer;\n    if (isFreeMode && isRunning && currentRecord) {\n      freeModeTimer = setInterval(() => {\n        setFreeModeTime(prev => prev + 1);\n\n        // Cập nhật thời gian của Record\n        setRecords(prev => prev.map(record => record.name === currentRecord.name ? {\n          ...record,\n          time: record.time + 1\n        } : record));\n      }, 1000);\n    }\n    return () => clearInterval(freeModeTimer);\n  }, [isFreeMode, isRunning, currentRecord]);\n\n  // Chọn và bỏ chọn task\n  const handleSelectTaskBlock = taskName => {\n    // Nếu AutoSelect đang bật và người dùng thao tác chọn task, tắt AutoSelect\n    if (isAutoSelectEnabled) {\n      setIsAutoSelectEnabled(false);\n    }\n\n    // Nếu chọn lại task đang được chọn, bỏ chọn\n    if (selectedTaskName === taskName) {\n      if (isRunning) {\n        clearInterval(intervalRef.current); // Dừng interval đếm thời gian\n      }\n      setSelectedTaskName(null);\n      setIsTaskSelected(false);\n      setCountdownTimeTask(0);\n      setLastTaskStartTime(null);\n      setIsRunning(false); // Tạm dừng đếm\n      return;\n    }\n\n    // Chuyển sang task mới\n    const selectedTask = tasksForToday.find(task => task.name === taskName);\n    setSelectedTaskName(taskName);\n    if (selectedTask) {\n      const taskTimeSlotInSeconds = taskTimeSlotToSeconds(calculateTimeSlot(selectedTask.startTime, selectedTask.endTime));\n      const taskData = todayDataTimeCount.find(task => task.name === taskName);\n      const taskWorkedTime = taskData ? taskData.realTimeTaskCount : 0;\n\n      // Đảm bảo countdown không âm\n      const remainingTime = Math.max(taskTimeSlotInSeconds - taskWorkedTime, 0);\n      setCountdownTimeTask(remainingTime);\n      setIsTaskSelected(true);\n      setLastTaskStartTime(null); // Reset thời gian bắt đầu cho task mới\n    } else {\n      setCountdownTimeTask(0);\n      setIsTaskSelected(false);\n    }\n  };\n  const handleSelectRecord = recordName => {\n    if ((currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.name) === recordName) {\n      // Nếu đang bỏ chọn record hiện tại\n      setCurrentRecord(null); // Bỏ chọn record\n      setIsRunning(false); // Dừng đồng hồ\n    } else {\n      // Nếu chọn record mới\n      const selectedRecord = records.find(record => record.name === recordName);\n      if (selectedRecord) {\n        setCurrentRecord(selectedRecord); // Chọn record mới\n      }\n    }\n  };\n  const handleDeleteRecord = recordName => {\n    if ((currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.name) === recordName) {\n      setCurrentRecord(null); // Bỏ chọn record nếu đang chọn\n      setIsRunning(false); // Dừng đồng hồ\n    }\n    setRecords(prev => prev.filter(record => record.name !== recordName));\n  };\n\n  //Mode Free - create new record\n  const handleCreateRecord = () => {\n    const newName = recordNameInput.trim() || `Unknow Record ${recordCounter + 1}`;\n    const newRecord = {\n      name: newName,\n      time: 0 // Bắt đầu từ 0 giây\n    };\n    setRecords([...records, newRecord]);\n    setCurrentRecord(newRecord); // Đặt làm record hiện tại\n    setRecordNameInput(\"\");\n    setRecordCounter(prev => prev + 1);\n  };\n  useEffect(() => {\n    if (isFreeMode && isRunning && currentRecord) {\n      const timer = setInterval(() => {\n        setRecords(prevRecords => prevRecords.map(record => record.name === currentRecord.name ? {\n          ...record,\n          time: record.time + 1\n        } : record));\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isFreeMode, isRunning, currentRecord]);\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  // Update current time every minute\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 6000);\n    return () => clearInterval(timer);\n  }, []);\n  useEffect(() => {\n    if (currentMode === \"short-break\" || currentMode === \"long-break\") {\n      setIsRunning(false); // Dừng đếm ngược\n    }\n  }, [currentMode]);\n\n  // Tự động cuộn đến current-time-line khi mở trang\n  useEffect(() => {\n    if (timelineRef.current) {\n      const currentTimePosition = currentTime.getHours() * 60 + currentTime.getMinutes();\n      timelineRef.current.scrollTo({\n        top: currentTimePosition - 50,\n        // Cuộn đến vị trí current-time-line, trừ 50px để đẹp\n        behavior: \"smooth\"\n      });\n    }\n  }, [currentTime]);\n\n  // Calculate tasks for today\n  const calculateTasksForToday = useCallback(() => {\n    const today = new Date();\n    const tasks = [];\n    Object.values(works).flat().forEach(work => {\n      const workStartDate = new Date(work.startDate);\n      const workEndDate = new Date(work.endDate);\n      work.subWorks.forEach(task => {\n        const {\n          startTime,\n          endTime,\n          repeatOption,\n          customRepeat = {}\n        } = task;\n        const [startHour, startMinute] = startTime.split(\":\").map(Number);\n        const [endHour, endMinute] = endTime.split(\":\").map(Number);\n        let validDates = [];\n        if (repeatOption === \"Không lặp lại\") {\n          validDates = [workStartDate];\n        } else if (repeatOption === \"Hàng ngày\") {\n          let currentDate = new Date(workStartDate);\n          while (currentDate <= workEndDate) {\n            validDates.push(new Date(currentDate));\n            currentDate.setDate(currentDate.getDate() + 1);\n          }\n        } else if (repeatOption === \"Tùy chỉnh\") {\n          const {\n            repeatEvery = 1,\n            repeatUnit = \"ngày\",\n            startDate,\n            repeatDays = []\n          } = customRepeat;\n          const taskStartDate = startDate ? new Date(startDate) : workStartDate;\n          let currentDate = new Date(taskStartDate);\n          if (repeatUnit === \"ngày\") {\n            while (currentDate <= workEndDate) {\n              validDates.push(new Date(currentDate));\n              currentDate.setDate(currentDate.getDate() + repeatEvery);\n            }\n          } else if (repeatUnit === \"tuần\") {\n            const dayMapping = [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"];\n            while (currentDate <= workEndDate) {\n              const dayOfWeek = dayMapping[currentDate.getDay()];\n              if (repeatDays.includes(dayOfWeek)) {\n                validDates.push(new Date(currentDate));\n              }\n              currentDate.setDate(currentDate.getDate() + 1);\n            }\n          }\n        }\n        validDates.forEach(date => {\n          if (date.toDateString() === today.toDateString()) {\n            tasks.push({\n              ...task,\n              workName: work.name,\n              startTime: new Date(today.setHours(startHour, startMinute)),\n              endTime: new Date(today.setHours(endHour, endMinute))\n            });\n          }\n        });\n      });\n    });\n    const sortedTasks = tasks.sort((a, b) => a.startTime - b.startTime);\n    setTasksForToday(sortedTasks);\n  }, [works]);\n  const autoSelectTask = useCallback(() => {\n    if (!isAutoSelectEnabled) {\n      setIsAutoSelectEnabled(true); // Đảm bảo trạng thái AutoSelect luôn bật\n    }\n    const availableTasks = todayDataTimeCount.filter(task => parseInt(task.status.replace(\"%\", \"\"), 10) < 100);\n    if (availableTasks.length === 0) return; // Không có task nào khả dụng\n\n    let selectedTask = null;\n\n    // Ưu tiên chọn task theo chế độ xem\n    if (viewMode === \"byPercent\") {\n      availableTasks.sort((a, b) => {\n        const percentA = parseInt(a.status.replace(\"%\", \"\"), 10);\n        const percentB = parseInt(b.status.replace(\"%\", \"\"), 10);\n        if (percentA !== percentB) return percentB - percentA;\n        return a.totalTimeSlotInSeconds - b.totalTimeSlotInSeconds;\n      });\n    } else if (viewMode === \"byTime\") {\n      const currentMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();\n      availableTasks.sort((a, b) => {\n        var _tasksForToday$find, _tasksForToday$find$s, _tasksForToday$find2, _tasksForToday$find2$, _tasksForToday$find3, _tasksForToday$find3$, _tasksForToday$find4, _tasksForToday$find4$;\n        const taskAStartMinutes = ((_tasksForToday$find = tasksForToday.find(task => task.name === a.name)) === null || _tasksForToday$find === void 0 ? void 0 : (_tasksForToday$find$s = _tasksForToday$find.startTime) === null || _tasksForToday$find$s === void 0 ? void 0 : _tasksForToday$find$s.getHours()) * 60 + ((_tasksForToday$find2 = tasksForToday.find(task => task.name === a.name)) === null || _tasksForToday$find2 === void 0 ? void 0 : (_tasksForToday$find2$ = _tasksForToday$find2.startTime) === null || _tasksForToday$find2$ === void 0 ? void 0 : _tasksForToday$find2$.getMinutes()) || Infinity;\n        const taskBStartMinutes = ((_tasksForToday$find3 = tasksForToday.find(task => task.name === b.name)) === null || _tasksForToday$find3 === void 0 ? void 0 : (_tasksForToday$find3$ = _tasksForToday$find3.startTime) === null || _tasksForToday$find3$ === void 0 ? void 0 : _tasksForToday$find3$.getHours()) * 60 + ((_tasksForToday$find4 = tasksForToday.find(task => task.name === b.name)) === null || _tasksForToday$find4 === void 0 ? void 0 : (_tasksForToday$find4$ = _tasksForToday$find4.startTime) === null || _tasksForToday$find4$ === void 0 ? void 0 : _tasksForToday$find4$.getMinutes()) || Infinity;\n        const diffA = Math.abs(taskAStartMinutes - currentMinutes);\n        const diffB = Math.abs(taskBStartMinutes - currentMinutes);\n        if (diffA !== diffB) return diffA - diffB;\n        return a.totalTimeSlotInSeconds - b.totalTimeSlotInSeconds;\n      });\n    }\n    selectedTask = availableTasks[0];\n\n    // Nếu task hiện tại đã là ưu tiên, không thay đổi\n    if (selectedTaskName === selectedTask.name) return;\n\n    // Nếu task hiện tại không phải ưu tiên, chọn lại\n    handleSelectTaskBlock(selectedTask.name);\n  }, [isAutoSelectEnabled, todayDataTimeCount, viewMode, tasksForToday, currentTime, selectedTaskName]);\n\n  // cập nhật danh sách taskFortoday\n  useEffect(() => {\n    if (mode === \"auto\") {\n      calculateTasksForToday();\n    }\n  }, [mode, calculateTasksForToday]);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      if (now.getHours() === 0 && now.getMinutes() === 0) {\n        calculateTasksForToday(); // Làm mới danh sách task\n      }\n    }, 60000); // Kiểm tra mỗi phút\n    return () => clearInterval(timer);\n  }, [calculateTasksForToday]);\n  const renderTaskOnTimeline = task => {\n    const taskStart = task.startTime;\n    const taskEnd = task.endTime;\n    const startMinutes = taskStart.getHours() * 60 + taskStart.getMinutes();\n    const endMinutes = taskEnd.getHours() * 60 + taskEnd.getMinutes();\n\n    // Kiểm tra trạng thái của task\n    const isSelected = selectedTaskName === task.name;\n    const isDimmed = selectedTaskName && selectedTaskName !== task.name;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `task-block ${isSelected ? \"selected\" : \"\"} ${isDimmed ? \"dimmed\" : \"\"}`,\n      style: {\n        top: `${startMinutes}px`,\n        height: `${endMinutes - startMinutes}px`\n      },\n      onClick: () => handleSelectTaskBlock(task.name),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-name\",\n        children: task.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"select-task-button\",\n        children: isSelected ? \"Deselect\" : \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, task.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this);\n  };\n  const calculateTimeSlot = (startTime, endTime) => {\n    const diff = new Date(endTime - startTime);\n    const hours = diff.getUTCHours();\n    const minutes = diff.getUTCMinutes();\n    return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}`;\n  };\n  const getPomodoroBackground = () => {\n    if (isFreeMode) return \"#d4b3e9\"; // Màu tím pastel cho chế độ tự do\n    switch (currentMode) {\n      case \"pomodoro\":\n        return \"#56daeb\";\n      // Xanh ngọc bích\n      case \"short-break\":\n        return \"#a8d5ba\";\n      // Xanh lá pastel\n      case \"long-break\":\n        return \"#f6e58d\";\n      // Vàng chanh\n      default:\n        return \"#f9f9f9\";\n      // Mặc định\n    }\n  };\n  const taskTimeSlotToSeconds = timeSlot => {\n    const [hours, minutes] = timeSlot.split(\":\").map(Number);\n    return hours * 3600 + minutes * 60;\n  };\n  const handleModeChange = newMode => {\n    // Nếu chỉ thay đổi giữa pomodoro, short-break, long-break\n    if ([\"pomodoro\", \"short-break\", \"long-break\"].includes(newMode)) {\n      setCurrentMode(newMode); // Cập nhật chế độ hiện tại\n      if (newMode === \"pomodoro\") {\n        setTimeLeft(1500); // Reset thời gian 25 phút\n      } else if (newMode === \"short-break\") {\n        setTimeLeft(300); // Reset thời gian nghỉ ngắn 5 phút\n      } else if (newMode === \"long-break\") {\n        setTimeLeft(900); // Reset thời gian nghỉ dài 15 phút\n      }\n      return; // Thoát hàm mà không làm ảnh hưởng đến trạng thái khác\n    }\n\n    // Nếu thay đổi giữa các chế độ auto, manual, free\n    setIsRunning(false); // Dừng tất cả các bộ đếm\n    setLastTaskStartTime(null); // Reset mốc thời gian bắt đầu\n    setTimeLeft(1500); // Reset thời gian Pomodoro về 25 phút\n    setFreeModeTime(0); // Reset thời gian đếm tự do về 0\n\n    // Bỏ chọn task và record\n    setSelectedTaskName(null); // Hủy chọn task hiện tại\n    setIsTaskSelected(false); // Đặt lại trạng thái task đã chọn\n    setCurrentTaskManual(null); // Đặt lại task thủ công\n    setSelectedWork(null); // Đặt lại work được chọn\n    setSelectedTask(null); // Đặt lại task trong work\n    setTempWork(null); // Reset work tạm thời\n    setTempTask(null); // Reset task tạm thời\n    setCurrentRecord(null); // Bỏ chọn record hiện tại\n\n    // Cập nhật chế độ\n    setMode(newMode);\n  };\n  const handleToggleAutoSelect = () => {\n    // Kiểm tra nếu không phải chế độ \"auto\" thì chuyển sang \"auto\"\n    if (mode !== \"auto\") {\n      setMode(\"auto\");\n    }\n\n    // Đảo trạng thái của AutoSelect\n    setIsAutoSelectEnabled(prev => {\n      const newState = !prev;\n      if (newState) {\n        // Nếu bật AutoSelect\n        autoSelectTask(); // Tự động chọn task\n      }\n      return newState;\n    });\n  };\n  const openManualSelectModal = () => {\n    setTempWork(selectedWork);\n    setTempTask(selectedTask);\n    setIsModalOpen(true);\n  };\n  const handleManualSelectWork = work => {\n    setTempWork(prev => (prev === null || prev === void 0 ? void 0 : prev.id) === work.id ? null : work);\n    setTempTask(null);\n  };\n  const handleManualSelectTask = task => {\n    setTempTask(prev => (prev === null || prev === void 0 ? void 0 : prev.name) === task.name ? null : task);\n  };\n  const handleManualSelectionDone = () => {\n    setSelectedWork(tempWork);\n    setSelectedTask(tempTask);\n    setCurrentTaskManual(tempTask ? {\n      ...tempTask,\n      workName: tempWork.name,\n      workStartDate: tempWork.startDate,\n      workEndDate: tempWork.endDate,\n      startTime: new Date(`1970-01-01T${tempTask.startTime}:00`),\n      endTime: new Date(`1970-01-01T${tempTask.endTime}:00`)\n    } : null);\n    if (tempTask) {\n      const taskTimeSlot = calculateTimeSlot(new Date(`1970-01-01T${tempTask.startTime}:00`), new Date(`1970-01-01T${tempTask.endTime}:00`));\n      setCountdownTimeTask(taskTimeSlotToSeconds(taskTimeSlot));\n      setIsTaskSelected(true);\n    } else {\n      setCountdownTimeTask(0);\n      setIsTaskSelected(false);\n    }\n    setIsModalOpen(false);\n  };\n  const closeModal = () => {\n    setTempWork(selectedWork);\n    setTempTask(selectedTask);\n    setIsModalOpen(false);\n  };\n  const selectedTaskData = todayDataTimeCount.find(task => task.name === selectedTaskName);\n  const percentCompleted = selectedTaskData ? parseInt(selectedTaskData.status.replace('%', ''), 10) : 0; // Nếu không tìm thấy, mặc định là 0\n  const sortedTodayDataTimeCount = useMemo(() => {\n    if (viewMode === \"byPercent\") {\n      return [...todayDataTimeCount].sort((a, b) => {\n        const percentA = parseInt(a.status.replace(\"%\", \"\"), 10);\n        const percentB = parseInt(b.status.replace(\"%\", \"\"), 10);\n        if (percentA !== percentB) {\n          return percentB - percentA; // Sắp xếp theo phần trăm giảm dần\n        }\n        if (a.totalTimeSlotInSeconds !== b.totalTimeSlotInSeconds) {\n          return b.totalTimeSlotInSeconds - a.totalTimeSlotInSeconds; // Sắp xếp theo timeslot giảm dần\n        }\n        return a.name.localeCompare(b.name); // Sắp xếp theo thứ tự chữ cái\n      });\n    }\n    return todayDataTimeCount;\n  }, [todayDataTimeCount, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-form\",\n    \"data-aos\": \"zoom-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"search-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Focus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 793,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"today-data-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"today-data-toggle\",\n          onClick: () => setIsTodayDataVisible(prev => !prev),\n          children: \"TODAY-DataTimeCount \\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 5\n        }, this), isTodayDataVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today-data-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"today-data-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Today: \", new Date().toDateString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"view-mode-selector\",\n              value: viewMode,\n              onChange: e => setViewMode(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"byTime\",\n                children: \"By Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 814,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"byPercent\",\n                children: \"By Percent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 815,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: sortedTodayDataTimeCount.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [task.name, \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [formatTime(task.realTimeTaskCount), \" / \", task.timeSlot]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 822,\n                columnNumber: 15\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: task.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 15\n              }, this), \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown-task\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar-todaytask-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-todaytask\",\n            style: {\n              width: `${Math.min(percentCompleted, 100)}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 834,\n          columnNumber: 9\n        }, this), isTaskSelected ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"countdown-text\",\n          children: formatTime(countdownTimeTask)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"countdown-text\",\n          children: \"Select task!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"focus-modes\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `focus-mode ${mode === \"auto\" ? \"active\" : \"\"}`,\n          onClick: () => handleModeChange(\"auto\"),\n          children: \"T\\u1EF1 \\u0111\\u1ED9ng\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `focus-mode ${mode === \"manual\" ? \"active\" : \"\"}`,\n          onClick: () => {\n            handleModeChange(\"manual\");\n            openManualSelectModal();\n          },\n          children: \"T\\u1EF1 ch\\u1ECDn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 856,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `focus-mode ${mode === \"free\" ? \"active\" : \"\"}`,\n          onClick: () => handleModeChange(\"free\"),\n          children: \"T\\u1EF1 do\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"focus-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"autoselect-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"autoselect-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autoselect-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Total Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: formatTime(totalRealTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 881,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autoselect-stat\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Completed:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: `${completedTaskCount}/${totalTasks}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 885,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autoselect-stat\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `autoselect-button ${isAutoSelectEnabled ? \"on\" : \"off\"}`,\n              onClick: handleToggleAutoSelect,\n              children: isAutoSelectEnabled ? \"ON\" : \"OFF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 887,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 3\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeline-container\",\n        ref: timelineRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-time-line\",\n            style: {\n              \"--time-position\": `${currentTime.getHours() * 60 + currentTime.getMinutes()}px`,\n              top: `${currentTime.getHours() * 60 + currentTime.getMinutes() + 6.5}px`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 903,\n            columnNumber: 5\n          }, this), Array.from({\n            length: 25\n          }).map((_, hour) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hour-block\",\n            style: {\n              top: `${hour * 60}px`\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hour-marker\",\n              children: hour < 10 ? `0${hour}:00` : `${hour}:00`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 912,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hour-divider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 915,\n              columnNumber: 9\n            }, this)]\n          }, hour, true, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 7\n          }, this)), tasksForToday.map(task => renderTaskOnTimeline(task))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 1\n      }, this), \" \", mode === \"auto\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Today Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"T\\u1ED5ng s\\u1ED1 task: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: tasksForToday.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 11\n        }, this), tasksForToday.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"task-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 933,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Work\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 934,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 935,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"TimeSlot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 936,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 932,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tasksForToday.map((task, index) => {\n              const timeSlot = calculateTimeSlot(task.startTime, task.endTime); // Tính TimeSlot\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: `task-list-item ${selectedTaskName === task.name ? \"selected\" : \"\"}`,\n                onClick: () => handleSelectTaskBlock(task.name),\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 950,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: task.workName || \"N/A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 951,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [task.startTime.toLocaleTimeString([], {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    hour12: false\n                  }), \" \", \"-\", \" \", task.endTime.toLocaleTimeString([], {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    hour12: false\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 952,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: timeSlot\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 965,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 930,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Empty Task Today\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 3\n      }, this), \" \", mode === \"manual\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"manual-mode-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"manual-selected-tasks\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Selected Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 982,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: selectedTasksManual.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [task.name, \": \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: formatTime(task.time)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 986,\n                columnNumber: 26\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 985,\n              columnNumber: 11\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-select\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Task hi\\u1EC7n t\\u1EA1i\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Work:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 9\n            }, this), \" \", (currentTaskManual === null || currentTaskManual === void 0 ? void 0 : currentTaskManual.workName) || \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 995,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Task:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 999,\n              columnNumber: 9\n            }, this), \" \", (currentTaskManual === null || currentTaskManual === void 0 ? void 0 : currentTaskManual.name) || \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Th\\u1EDDi gian:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1002,\n              columnNumber: 9\n            }, this), \" \", (currentTaskManual === null || currentTaskManual === void 0 ? void 0 : (_currentTaskManual$st = currentTaskManual.startTime) === null || _currentTaskManual$st === void 0 ? void 0 : _currentTaskManual$st.toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              hour12: false\n            })) || \"N/A\", \" \", \"-\", \" \", (currentTaskManual === null || currentTaskManual === void 0 ? void 0 : (_currentTaskManual$en = currentTaskManual.endTime) === null || _currentTaskManual$en === void 0 ? void 0 : _currentTaskManual$en.toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              hour12: false\n            })) || \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Timeslot:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1016,\n              columnNumber: 9\n            }, this), \" \", currentTaskManual ? calculateTimeSlot(new Date(currentTaskManual.startTime), new Date(currentTaskManual.endTime)) : \"N/A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1015,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 9\n      }, this), \" \", mode === \"free\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"free-mode-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"free-mode-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"New Record\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1031,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"record-creation\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter record name\",\n              value: recordNameInput,\n              onChange: e => setRecordNameInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1033,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCreateRecord,\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1032,\n            columnNumber: 7\n          }, this), currentRecord && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-record\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Current Record:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1044,\n                columnNumber: 13\n              }, this), \" \", currentRecord.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"free-mode-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Records\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Time: \", formatTime(totalFreeTime)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: records.map((record, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: record.name === (currentRecord === null || currentRecord === void 0 ? void 0 : currentRecord.name) ? \"active\" : \"\",\n              onClick: () => handleSelectRecord(record.name) // Xử lý chọn/bỏ chọn\n              ,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [record.name, \": \", formatTime(record.time)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-record-button\",\n                onClick: e => {\n                  e.stopPropagation(); // Ngăn không để sự kiện click lan lên li\n                  handleDeleteRecord(record.name); // Xử lý xóa record\n                },\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1065,\n                columnNumber: 13\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1057,\n              columnNumber: 11\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1055,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"note-button\",\n            onClick: () => alert(\"Daily form is not implemented yet.\"),\n            children: \"Daily\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"note-button\",\n            onClick: () => setNoteContent(\"\"),\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1093,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"note-input\",\n            className: \"note-label\",\n            children: \"Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"note-input\",\n            className: \"note-input\",\n            value: noteContent,\n            onChange: e => setNoteContent(e.target.value),\n            placeholder: \"Write your notes here...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1099,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 1\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pomodoro-timer\",\n        style: {\n          backgroundColor: getPomodoroBackground()\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pomodoro-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"swap-icon\",\n            onClick: toggleFreeMode,\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pomodoro-modes\",\n            children: !isFreeMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `pomodoro-mode ${currentMode === \"pomodoro\" ? \"active\" : \"\"}`,\n                onClick: () => {\n                  setCurrentMode(\"pomodoro\");\n                  handleModeChange(\"pomodoro\");\n                },\n                children: \"Pomodoro\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `pomodoro-mode ${currentMode === \"short-break\" ? \"active\" : \"\"}`,\n                onClick: () => {\n                  setCurrentMode(\"short-break\");\n                  handleModeChange(\"short-break\");\n                },\n                children: \"Short-break\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1129,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `pomodoro-mode ${currentMode === \"long-break\" ? \"active\" : \"\"}`,\n                onClick: () => {\n                  setCurrentMode(\"long-break\");\n                  handleModeChange(\"long-break\");\n                },\n                children: \"Long-break\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1138,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `pomodoro-mode ${isFreeMode ? \"active\" : \"\"}`,\n              onClick: () => {\n                if (!isFreeMode) {\n                  toggleFreeMode();\n                } else {\n                  setFreeModeTime(0);\n                }\n              },\n              children: \"Stopwatch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1149,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1117,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: formatTime(isFreeMode ? freeModeTime : timeLeft)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1168,\n          columnNumber: 3\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isTaskSelected || currentRecord ? handleStartPause : () => toast.error(\"Please choose a task or record\"),\n            disabled: !isTaskSelected && !currentRecord // Không bật nút nếu không có Task hoặc Record\n            ,\n            children: isRunning ? \"Tạm dừng\" : \"Bắt đầu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 3\n          }, this), isFreeMode && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setFreeModeTime(0),\n            children: \"K\\u1EBFt th\\xFAc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 7\n          }, this), !isFreeMode && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSkip,\n            children: \"B\\u1ECF qua\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1185,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 1\n    }, this), \" \", isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-task-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-left\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Danh s\\xE1ch Work\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1200,\n            columnNumber: 15\n          }, this), Object.values(works).flat().map(work => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `work-item-focus ${(tempWork === null || tempWork === void 0 ? void 0 : tempWork.id) === work.id ? \"active\" : \"\"}`,\n            onClick: () => handleManualSelectWork(work),\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: work.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1209,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Ng\\xE0y: \", work.startDate, \" - \", work.endDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1210,\n              columnNumber: 19\n            }, this)]\n          }, work.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1202,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"focus-button\",\n              onClick: handleManualSelectionDone,\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modal-close\",\n              onClick: closeModal,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1222,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Danh s\\xE1ch Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 15\n          }, this), tempWork && tempWork.subWorks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: tempWork.subWorks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `task-item-focus ${(tempTask === null || tempTask === void 0 ? void 0 : tempTask.name) === task.name ? \"active\" : \"\"}`,\n              onClick: () => handleManualSelectTask(task),\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: task.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1237,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Th\\u1EDDi gian: \", task.startTime, \" - \", task.endTime]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1238,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1230,\n              columnNumber: 21\n            }, this))\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Ch\\u1ECDn m\\u1ED9t Work \\u0111\\u1EC3 xem Task.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1245,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 792,\n    columnNumber: 5\n  }, this) //div of main-form\n  ;\n};\n_s(Focus, \"sp3z3AfmYy7rvJHLsZDMGXU071U=\");\n_c = Focus;\nexport default Focus;\nvar _c;\n$RefreshReg$(_c, \"Focus\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","useMemo","jsxDEV","_jsxDEV","Fragment","_Fragment","Focus","works","toast","_s","_currentTaskManual$st","_currentTaskManual$en","mode","setMode","selectedWork","setSelectedWork","selectedTask","setSelectedTask","currentTaskManual","setCurrentTaskManual","isModalOpen","setIsModalOpen","tempWork","setTempWork","tempTask","setTempTask","timeLeft","setTimeLeft","isRunning","setIsRunning","cycle","setCycle","isFocusPhase","setIsFocusPhase","tasksForToday","setTasksForToday","currentTime","setCurrentTime","Date","timelineRef","selectedTaskName","setSelectedTaskName","noteContent","setNoteContent","isFreeMode","setIsFreeMode","freeModeTime","setFreeModeTime","currentMode","setCurrentMode","countdownTimeTask","setCountdownTimeTask","isTaskSelected","setIsTaskSelected","todayDataTimeCount","setTodayDataTimeCount","isTodayDataVisible","setIsTodayDataVisible","lastTaskStartTime","setLastTaskStartTime","intervalRef","viewMode","setViewMode","isAutoSelectEnabled","setIsAutoSelectEnabled","selectedTasksManual","setSelectedTasksManual","currentRecord","setCurrentRecord","records","setRecords","recordCounter","setRecordCounter","recordNameInput","setRecordNameInput","totalFreeTime","reduce","total","record","time","toggleFreeMode","setPomodoroCount","prevCount","newCount","handlePomodoroComplete","prev","info","success","clearInterval","current","setInterval","map","task","name","updatedRealTime","realTimeTaskCount","percentCompleted","Math","floor","totalTimeSlotInSeconds","status","timer","existingTask","find","totalRealTime","completedTaskCount","filter","parseInt","replace","length","totalTasks","handleStartPause","error","taskTimeSlot","calculateTimeSlot","startTime","endTime","hours","minutes","split","Number","date","toDateString","timeSlot","toString","padStart","handleSkip","countdownTimer","max","freeModeTimer","handleSelectTaskBlock","taskName","taskTimeSlotInSeconds","taskTimeSlotToSeconds","taskData","taskWorkedTime","remainingTime","handleSelectRecord","recordName","selectedRecord","handleDeleteRecord","handleCreateRecord","newName","trim","newRecord","prevRecords","formatTime","seconds","secs","currentTimePosition","getHours","getMinutes","scrollTo","top","behavior","calculateTasksForToday","today","tasks","Object","values","flat","forEach","work","workStartDate","startDate","workEndDate","endDate","subWorks","repeatOption","customRepeat","startHour","startMinute","endHour","endMinute","validDates","currentDate","push","setDate","getDate","repeatEvery","repeatUnit","repeatDays","taskStartDate","dayMapping","dayOfWeek","getDay","includes","workName","setHours","sortedTasks","sort","a","b","autoSelectTask","availableTasks","percentA","percentB","currentMinutes","_tasksForToday$find","_tasksForToday$find$s","_tasksForToday$find2","_tasksForToday$find2$","_tasksForToday$find3","_tasksForToday$find3$","_tasksForToday$find4","_tasksForToday$find4$","taskAStartMinutes","Infinity","taskBStartMinutes","diffA","abs","diffB","now","renderTaskOnTimeline","taskStart","taskEnd","startMinutes","endMinutes","isSelected","isDimmed","className","style","height","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","diff","getUTCHours","getUTCMinutes","getPomodoroBackground","handleModeChange","newMode","handleToggleAutoSelect","newState","openManualSelectModal","handleManualSelectWork","id","handleManualSelectTask","handleManualSelectionDone","closeModal","selectedTaskData","sortedTodayDataTimeCount","localeCompare","value","onChange","e","target","index","width","min","ref","Array","from","_","hour","toLocaleTimeString","minute","hour12","type","placeholder","stopPropagation","alert","htmlFor","backgroundColor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/meiyoudg/source/repos/AwareTime/frontend/src/components/Focus.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useMemo } from \"react\";\r\nimport \"./styles/focus.css\";\r\n\r\nconst Focus = ({ works = {}, toast }) => {\r\n  const [mode, setMode] = useState(\"auto\");\r\n  const [selectedWork, setSelectedWork] = useState(null);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [currentTaskManual, setCurrentTaskManual] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [tempWork, setTempWork] = useState(null);\r\n  const [tempTask, setTempTask] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(1500);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [cycle, setCycle] = useState(0);\r\n  const [isFocusPhase, setIsFocusPhase] = useState(true);\r\n  const [tasksForToday, setTasksForToday] = useState([]);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const timelineRef = useRef(null); // Ref để truy cập timeline-container\r\n  // const [selectedTaskBlock, setSelectedTaskBlock] = useState(null);\r\n  const [selectedTaskName, setSelectedTaskName] = useState(null);\r\n  const [noteContent, setNoteContent] = useState(\"\");\r\n  const [isFreeMode, setIsFreeMode] = useState(false); // Thêm trạng thái cho chế độ tự do\r\n  const [freeModeTime, setFreeModeTime] = useState(0); // Thời gian đếm giờ tự do\r\n  const [currentMode, setCurrentMode] = useState(\"pomodoro\"); // Lưu chế độ hiện tại\r\n  const [countdownTimeTask, setCountdownTimeTask] = useState(0); // Thời gian đếm ngược\r\n  const [isTaskSelected, setIsTaskSelected] = useState(false); // Trạng thái task được chọn\r\n  const [todayDataTimeCount, setTodayDataTimeCount] = useState([]);\r\n  const [isTodayDataVisible, setIsTodayDataVisible] = useState(false); // Định nghĩa biến\r\n  const [lastTaskStartTime, setLastTaskStartTime] = useState(null);\r\n  const intervalRef = useRef(null);\r\n  const [viewMode, setViewMode] = useState(\"byTime\");\r\n  // Add state for AutoSelect\r\n  const [isAutoSelectEnabled, setIsAutoSelectEnabled] = useState(false);\r\n  const [selectedTasksManual, setSelectedTasksManual] = useState([]);\r\n  \r\n  const [currentRecord, setCurrentRecord] = useState(null); // Record hiện tại đang được đếm\r\n  const [records, setRecords] = useState([]); // Danh sách tất cả các record\r\n  const [recordCounter, setRecordCounter] = useState(0); // Đếm số lượng record\r\n\r\n  const [recordNameInput, setRecordNameInput] = useState(\"\"); // Tên record nhập vào\r\n  const totalFreeTime = useMemo(() => {\r\n    // Tổng thời gian của tất cả các record\r\n    return records.reduce((total, record) => total + record.time, 0);\r\n  }, [records]);\r\n\r\n\r\n\r\n \r\n\r\n  const toggleFreeMode = () => {\r\n    if (isFreeMode) {\r\n      // Chuyển về chế độ Pomodoro\r\n      setIsFreeMode(false);\r\n      setFreeModeTime(0); // Reset thời gian tự do\r\n      setTimeLeft(isFocusPhase ? 1500 : timeLeft); // Quay về thời gian Pomodoro\r\n    } else {\r\n      // Chuyển sang chế độ tự do\r\n      setIsFreeMode(true);\r\n      setFreeModeTime(0); // Reset bộ đếm tự do về 0\r\n      setIsRunning(false); // Dừng đếm tự do\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (timeLeft === 0) {\r\n      if (currentMode === \"pomodoro\") {\r\n        setPomodoroCount((prevCount) => {\r\n          const newCount = prevCount + 1;\r\n          if (newCount % 4 === 0) {\r\n            setCurrentMode(\"long-break\");\r\n            setTimeLeft(900); // Long Break - 15 phút\r\n          } else {\r\n            setCurrentMode(\"short-break\");\r\n            setTimeLeft(300); // Short Break - 5 phút\r\n          }\r\n          return newCount;\r\n        });\r\n      } else if (currentMode === \"short-break\" || currentMode === \"long-break\") {\r\n        setCurrentMode(\"pomodoro\");\r\n        setTimeLeft(1500); // Pomodoro - 25 phút\r\n      }\r\n    }\r\n  }, [timeLeft, currentMode]);\r\n  \r\n\r\n  // Chu kỳ Pomodoro\r\n  const handlePomodoroComplete = useCallback(() => {\r\n    setIsRunning(false);\r\n    if (isFocusPhase) {\r\n      setIsFocusPhase(false);\r\n      setCycle((prev) => prev + 1);\r\n      if ((cycle + 1) % 4 === 0) {\r\n        setTimeLeft(900);\r\n        toast.info(\"Long Break! Take a 15-minute rest.\");\r\n      } else {\r\n        setTimeLeft(300);\r\n        toast.info(\"Short Break! Take a 5-minute rest.\");\r\n      }\r\n    } else {\r\n      setIsFocusPhase(true);\r\n      setTimeLeft(1500);\r\n      toast.success(\"Back to Focus! 25 minutes.\");\r\n    }\r\n  }, [cycle, isFocusPhase, toast]);\r\n\r\n\r\n// Quản lý realTimeTaskCount khi đồng hồ chạy\r\nuseEffect(() => {\r\n  if (!isRunning || !selectedTaskName || currentMode !== \"pomodoro\") {\r\n    clearInterval(intervalRef.current);\r\n    return;\r\n  }\r\n\r\n  clearInterval(intervalRef.current);\r\n\r\n  intervalRef.current = setInterval(() => {\r\n    setTodayDataTimeCount((prev) =>\r\n      prev.map((task) => {\r\n        if (task.name === selectedTaskName) {\r\n          const updatedRealTime = task.realTimeTaskCount + 1;\r\n          const percentCompleted = Math.floor(\r\n            (updatedRealTime / task.totalTimeSlotInSeconds) * 100\r\n          );\r\n          return {\r\n            ...task,\r\n            realTimeTaskCount: updatedRealTime,\r\n            status: `${percentCompleted}%`, // Cập nhật phần trăm hoàn thành\r\n          };\r\n        }\r\n        return task;\r\n      })\r\n    );\r\n  }, 1000);\r\n\r\n  return () => clearInterval(intervalRef.current);\r\n}, [isRunning, selectedTaskName, currentMode]);\r\n\r\n//realtime của manual\r\nuseEffect(() => {\r\n  if (!isRunning || mode !== \"manual\" || !currentTaskManual) return;\r\n\r\n  const timer = setInterval(() => {\r\n    setSelectedTasksManual((prev) => {\r\n      const existingTask = prev.find((task) => task.name === currentTaskManual.name);\r\n      if (existingTask) {\r\n        return prev.map((task) =>\r\n          task.name === currentTaskManual.name\r\n            ? { ...task, time: task.time + 1 }\r\n            : task\r\n        );\r\n      } else {\r\n        return [\r\n          ...prev,\r\n          {\r\n            name: currentTaskManual.name,\r\n            time: 1,\r\n          },\r\n        ];\r\n      }\r\n    });\r\n  }, 1000);\r\n\r\n  return () => clearInterval(timer);\r\n}, [isRunning, mode, currentTaskManual]);\r\n\r\n\r\nconst totalRealTime = useMemo(() => {\r\n  // Tính tổng thời gian thực của tất cả các task\r\n  return todayDataTimeCount.reduce((total, task) => total + task.realTimeTaskCount, 0);\r\n}, [todayDataTimeCount]);\r\n\r\nconst completedTaskCount = useMemo(() => {\r\n  // Đếm số lượng task đã hoàn thành\r\n  return todayDataTimeCount.filter((task) => parseInt(task.status.replace('%', ''), 10) >= 100).length;\r\n}, [todayDataTimeCount]);\r\n\r\nconst totalTasks = todayDataTimeCount.length; // Tổng số task hôm nay\r\n\r\n\r\n// Khi bắt đầu hoặc tạm dừng\r\n//test code\r\nconst handleStartPause = () => {\r\n  if (isRunning) {\r\n    // Dừng interval\r\n    clearInterval(intervalRef.current);\r\n    setIsRunning(false);\r\n  } else {\r\n    if (!isTaskSelected && !currentRecord) {\r\n      // Kiểm tra nếu không có Task và không có Record được chọn\r\n      toast.error(\"Please choose a task or record\");\r\n      return;\r\n    }\r\n\r\n    setIsRunning(true);\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      if (isTaskSelected) {\r\n        // Đếm thời gian cho Task\r\n        setTodayDataTimeCount((prev) =>\r\n          prev.map((task) =>\r\n            task.name === selectedTaskName\r\n              ? { ...task, realTimeTaskCount: task.realTimeTaskCount + 1 }\r\n              : task\r\n          )\r\n        );\r\n      } else if (currentRecord) {\r\n        // Đếm thời gian cho Record\r\n        setRecords((prev) =>\r\n          prev.map((record) =>\r\n            record.name === currentRecord.name\r\n              ? { ...record, time: record.time + 1 }\r\n              : record\r\n          )\r\n        );\r\n      }\r\n    }, 1000);\r\n  }\r\n};\r\n\r\n  // Update list todayDatatimeCount every newDay\r\n  useEffect(() => {\r\n    setTodayDataTimeCount(\r\n      tasksForToday.map((task) => {\r\n        const taskTimeSlot = calculateTimeSlot(task.startTime, task.endTime);\r\n        const [hours, minutes] = taskTimeSlot.split(\":\").map(Number);\r\n        const totalTimeSlotInSeconds = hours * 3600 + minutes * 60;\r\n  \r\n        return {\r\n          name: task.name,\r\n          date: new Date().toDateString(),\r\n          realTimeTaskCount: 0, // Ban đầu chưa có thời gian thực hiện\r\n          timeSlot: `${hours.toString().padStart(2, \"0\")}:${minutes\r\n            .toString()\r\n            .padStart(2, \"0\")}:00`, // Định dạng hh:mm:ss\r\n          totalTimeSlotInSeconds, // Lưu thêm tổng thời gian tính bằng giây\r\n          status: \"0%\", // Phần trăm hoàn thành ban đầu\r\n        };\r\n      })\r\n    );\r\n  }, [tasksForToday]);\r\n  \r\n  \r\n  \r\n\r\n  const [ setPomodoroCount] = useState(0); // Số lần Pomodoro hoàn thành\r\n  // Skip process pomodoro\r\n  const handleSkip = () => {\r\n    if (currentMode === \"pomodoro\") {\r\n      setPomodoroCount((prevCount) => {\r\n        const newCount = prevCount + 1;\r\n        if (newCount % 4 === 0) {\r\n          // Sau 3 lần nghỉ ngắn, nghỉ dài\r\n          setCurrentMode(\"long-break\");\r\n          setTimeLeft(900); // Long Break - 15 phút\r\n        } else {\r\n          setCurrentMode(\"short-break\");\r\n          setTimeLeft(300); // Short Break - 5 phút\r\n        }\r\n        return newCount;\r\n      });\r\n    } else if (currentMode === \"short-break\" || currentMode === \"long-break\") {\r\n      setCurrentMode(\"pomodoro\");\r\n      setTimeLeft(1500); // Pomodoro - 25 phút\r\n    }\r\n  };\r\n\r\n  \r\n  // THỜI GIAN CHO COUNTDOWN TIME\r\n  useEffect(() => {\r\n    let countdownTimer;\r\n    if (isTaskSelected && isRunning && (currentMode === \"pomodoro\" || isFreeMode)) {\r\n      countdownTimer = setInterval(() => {\r\n        setCountdownTimeTask((prev) => Math.max(prev - 1, 0)); // Đảm bảo không giảm dưới 0\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(countdownTimer);\r\n  }, [isRunning, isTaskSelected, currentMode, isFreeMode]);\r\n  \r\n\r\n    // Pomodoro logic decrease timeLeft\r\n    useEffect(() => {\r\n      let timer;\r\n      if (isRunning && timeLeft > 0) {\r\n        timer = setInterval(() => {\r\n          setTimeLeft((prev) => prev - 1);\r\n    \r\n          if (currentRecord) {\r\n            // Đồng bộ thời gian với Record hiện tại\r\n            setRecords((prev) =>\r\n              prev.map((record) =>\r\n                record.name === currentRecord.name\r\n                  ? { ...record, time: record.time + 1 }\r\n                  : record\r\n              )\r\n            );\r\n          }\r\n        }, 1000);\r\n      } else if (timeLeft === 0) {\r\n        handlePomodoroComplete();\r\n      }\r\n      return () => clearInterval(timer);\r\n    }, [isRunning, timeLeft, currentRecord]);\r\n    \r\n\r\n  // Freemode count time\r\n  useEffect(() => {\r\n    let freeModeTimer;\r\n    if (isFreeMode && isRunning && currentRecord) {\r\n      freeModeTimer = setInterval(() => {\r\n        setFreeModeTime((prev) => prev + 1);\r\n  \r\n        // Cập nhật thời gian của Record\r\n        setRecords((prev) =>\r\n          prev.map((record) =>\r\n            record.name === currentRecord.name\r\n              ? { ...record, time: record.time + 1 }\r\n              : record\r\n          )\r\n        );\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(freeModeTimer);\r\n  }, [isFreeMode, isRunning, currentRecord]);\r\n  \r\n  \r\n  // Chọn và bỏ chọn task\r\n  const handleSelectTaskBlock = (taskName) => {\r\n    // Nếu AutoSelect đang bật và người dùng thao tác chọn task, tắt AutoSelect\r\n    if (isAutoSelectEnabled) {\r\n      setIsAutoSelectEnabled(false);\r\n    }\r\n  \r\n    // Nếu chọn lại task đang được chọn, bỏ chọn\r\n    if (selectedTaskName === taskName) {\r\n      if (isRunning) {\r\n        clearInterval(intervalRef.current); // Dừng interval đếm thời gian\r\n      }\r\n      setSelectedTaskName(null);\r\n      setIsTaskSelected(false);\r\n      setCountdownTimeTask(0);\r\n      setLastTaskStartTime(null);\r\n      setIsRunning(false); // Tạm dừng đếm\r\n      return;\r\n    }\r\n  \r\n    // Chuyển sang task mới\r\n    const selectedTask = tasksForToday.find((task) => task.name === taskName);\r\n    setSelectedTaskName(taskName);\r\n  \r\n    if (selectedTask) {\r\n      const taskTimeSlotInSeconds = taskTimeSlotToSeconds(\r\n        calculateTimeSlot(selectedTask.startTime, selectedTask.endTime)\r\n      );\r\n      const taskData = todayDataTimeCount.find((task) => task.name === taskName);\r\n      const taskWorkedTime = taskData ? taskData.realTimeTaskCount : 0;\r\n  \r\n      // Đảm bảo countdown không âm\r\n      const remainingTime = Math.max(taskTimeSlotInSeconds - taskWorkedTime, 0);\r\n  \r\n      setCountdownTimeTask(remainingTime);\r\n      setIsTaskSelected(true);\r\n      setLastTaskStartTime(null); // Reset thời gian bắt đầu cho task mới\r\n    } else {\r\n      setCountdownTimeTask(0);\r\n      setIsTaskSelected(false);\r\n    }\r\n  };\r\n\r\n  const handleSelectRecord = (recordName) => {\r\n    if (currentRecord?.name === recordName) {\r\n      // Nếu đang bỏ chọn record hiện tại\r\n      setCurrentRecord(null); // Bỏ chọn record\r\n      setIsRunning(false); // Dừng đồng hồ\r\n    } else {\r\n      // Nếu chọn record mới\r\n      const selectedRecord = records.find((record) => record.name === recordName);\r\n      if (selectedRecord) {\r\n        setCurrentRecord(selectedRecord); // Chọn record mới\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleDeleteRecord = (recordName) => {\r\n    if (currentRecord?.name === recordName) {\r\n      setCurrentRecord(null); // Bỏ chọn record nếu đang chọn\r\n      setIsRunning(false); // Dừng đồng hồ\r\n    }\r\n    setRecords((prev) => prev.filter((record) => record.name !== recordName));\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  //Mode Free - create new record\r\n  const handleCreateRecord = () => {\r\n    const newName =\r\n      recordNameInput.trim() || `Unknow Record ${recordCounter + 1}`;\r\n    const newRecord = {\r\n      name: newName,\r\n      time: 0, // Bắt đầu từ 0 giây\r\n    };\r\n    setRecords([...records, newRecord]);\r\n    setCurrentRecord(newRecord); // Đặt làm record hiện tại\r\n    setRecordNameInput(\"\");\r\n    setRecordCounter((prev) => prev + 1);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    if (isFreeMode && isRunning && currentRecord) {\r\n      const timer = setInterval(() => {\r\n        setRecords((prevRecords) =>\r\n          prevRecords.map((record) =>\r\n            record.name === currentRecord.name\r\n              ? { ...record, time: record.time + 1 }\r\n              : record\r\n          )\r\n        );\r\n      }, 1000);\r\n  \r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [isFreeMode, isRunning, currentRecord]);\r\n  \r\n  \r\n  \r\n  \r\n  const formatTime = (seconds) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return `${hours.toString().padStart(2, \"0\")}:${minutes\r\n      .toString()\r\n      .padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\r\n  };\r\n  \r\n  \r\n\r\n  // Update current time every minute\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 6000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentMode === \"short-break\" || currentMode === \"long-break\") {\r\n      setIsRunning(false); // Dừng đếm ngược\r\n    }\r\n  }, [currentMode]);\r\n  \r\n\r\n  // Tự động cuộn đến current-time-line khi mở trang\r\n  useEffect(() => {\r\n  if (timelineRef.current) {\r\n    const currentTimePosition = currentTime.getHours() * 60 + currentTime.getMinutes();\r\n    timelineRef.current.scrollTo({\r\n      top: currentTimePosition - 50, // Cuộn đến vị trí current-time-line, trừ 50px để đẹp\r\n      behavior: \"smooth\",\r\n    });\r\n  }\r\n}, [currentTime]);\r\n\r\n\r\n  // Calculate tasks for today\r\n  const calculateTasksForToday = useCallback(() => {\r\n    const today = new Date();\r\n    const tasks = [];\r\n\r\n    Object.values(works).flat().forEach((work) => {\r\n      const workStartDate = new Date(work.startDate);\r\n      const workEndDate = new Date(work.endDate);\r\n\r\n      work.subWorks.forEach((task) => {\r\n        const { startTime, endTime, repeatOption, customRepeat = {} } = task;\r\n        const [startHour, startMinute] = startTime.split(\":\").map(Number);\r\n        const [endHour, endMinute] = endTime.split(\":\").map(Number);\r\n\r\n        let validDates = [];\r\n        if (repeatOption === \"Không lặp lại\") {\r\n          validDates = [workStartDate];\r\n        } else if (repeatOption === \"Hàng ngày\") {\r\n          let currentDate = new Date(workStartDate);\r\n          while (currentDate <= workEndDate) {\r\n            validDates.push(new Date(currentDate));\r\n            currentDate.setDate(currentDate.getDate() + 1);\r\n          }\r\n        } else if (repeatOption === \"Tùy chỉnh\") {\r\n          const { repeatEvery = 1, repeatUnit = \"ngày\", startDate, repeatDays = [] } = customRepeat;\r\n          const taskStartDate = startDate ? new Date(startDate) : workStartDate;\r\n          let currentDate = new Date(taskStartDate);\r\n\r\n          if (repeatUnit === \"ngày\") {\r\n            while (currentDate <= workEndDate) {\r\n              validDates.push(new Date(currentDate));\r\n              currentDate.setDate(currentDate.getDate() + repeatEvery);\r\n            }\r\n          } else if (repeatUnit === \"tuần\") {\r\n            const dayMapping = [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"];\r\n            while (currentDate <= workEndDate) {\r\n              const dayOfWeek = dayMapping[currentDate.getDay()];\r\n              if (repeatDays.includes(dayOfWeek)) {\r\n                validDates.push(new Date(currentDate));\r\n              }\r\n              currentDate.setDate(currentDate.getDate() + 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        validDates.forEach((date) => {\r\n          if (date.toDateString() === today.toDateString()) {\r\n            tasks.push({\r\n              ...task,\r\n              workName: work.name,\r\n              startTime: new Date(today.setHours(startHour, startMinute)),\r\n              endTime: new Date(today.setHours(endHour, endMinute)),\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    const sortedTasks = tasks.sort((a, b) => a.startTime - b.startTime);\r\n    setTasksForToday(sortedTasks);\r\n  }, [works]);\r\n\r\n  const autoSelectTask = useCallback(() => {\r\n    if (!isAutoSelectEnabled) {\r\n      setIsAutoSelectEnabled(true); // Đảm bảo trạng thái AutoSelect luôn bật\r\n    }\r\n  \r\n    const availableTasks = todayDataTimeCount.filter(\r\n      (task) => parseInt(task.status.replace(\"%\", \"\"), 10) < 100\r\n    );\r\n  \r\n    if (availableTasks.length === 0) return; // Không có task nào khả dụng\r\n  \r\n    let selectedTask = null;\r\n  \r\n    // Ưu tiên chọn task theo chế độ xem\r\n    if (viewMode === \"byPercent\") {\r\n      availableTasks.sort((a, b) => {\r\n        const percentA = parseInt(a.status.replace(\"%\", \"\"), 10);\r\n        const percentB = parseInt(b.status.replace(\"%\", \"\"), 10);\r\n        if (percentA !== percentB) return percentB - percentA;\r\n        return a.totalTimeSlotInSeconds - b.totalTimeSlotInSeconds;\r\n      });\r\n    } else if (viewMode === \"byTime\") {\r\n      const currentMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();\r\n      availableTasks.sort((a, b) => {\r\n        const taskAStartMinutes =\r\n          tasksForToday.find((task) => task.name === a.name)?.startTime?.getHours() * 60 +\r\n          tasksForToday.find((task) => task.name === a.name)?.startTime?.getMinutes() || Infinity;\r\n  \r\n        const taskBStartMinutes =\r\n          tasksForToday.find((task) => task.name === b.name)?.startTime?.getHours() * 60 +\r\n          tasksForToday.find((task) => task.name === b.name)?.startTime?.getMinutes() || Infinity;\r\n  \r\n        const diffA = Math.abs(taskAStartMinutes - currentMinutes);\r\n        const diffB = Math.abs(taskBStartMinutes - currentMinutes);\r\n  \r\n        if (diffA !== diffB) return diffA - diffB;\r\n        return a.totalTimeSlotInSeconds - b.totalTimeSlotInSeconds;\r\n      });\r\n    }\r\n  \r\n    selectedTask = availableTasks[0];\r\n  \r\n    // Nếu task hiện tại đã là ưu tiên, không thay đổi\r\n    if (selectedTaskName === selectedTask.name) return;\r\n  \r\n    // Nếu task hiện tại không phải ưu tiên, chọn lại\r\n    handleSelectTaskBlock(selectedTask.name);\r\n  }, [isAutoSelectEnabled, todayDataTimeCount, viewMode, tasksForToday, currentTime, selectedTaskName]);\r\n  \r\n\r\n  // cập nhật danh sách taskFortoday\r\n  useEffect(() => {\r\n    if (mode === \"auto\") {\r\n      calculateTasksForToday();\r\n    }\r\n  }, [mode, calculateTasksForToday]);\r\n\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      const now = new Date();\r\n      if (now.getHours() === 0 && now.getMinutes() === 0) {\r\n        calculateTasksForToday(); // Làm mới danh sách task\r\n      }\r\n    }, 60000); // Kiểm tra mỗi phút\r\n    return () => clearInterval(timer);\r\n  }, [calculateTasksForToday]);\r\n\r\n\r\n\r\n  \r\n\r\n  const renderTaskOnTimeline = (task) => {\r\n    const taskStart = task.startTime;\r\n    const taskEnd = task.endTime;\r\n    const startMinutes = taskStart.getHours() * 60 + taskStart.getMinutes();\r\n    const endMinutes = taskEnd.getHours() * 60 + taskEnd.getMinutes();\r\n  \r\n    // Kiểm tra trạng thái của task\r\n    const isSelected = selectedTaskName === task.name;\r\n    const isDimmed = selectedTaskName && selectedTaskName !== task.name;\r\n  \r\n    return (\r\n      <div\r\n        className={`task-block ${isSelected ? \"selected\" : \"\"} ${\r\n          isDimmed ? \"dimmed\" : \"\"\r\n        }`}\r\n        style={{\r\n          top: `${startMinutes}px`,\r\n          height: `${endMinutes - startMinutes}px`,\r\n        }}\r\n        key={task.name}\r\n        onClick={() => handleSelectTaskBlock(task.name)} \r\n      >\r\n        <div className=\"task-name\">{task.name}</div>\r\n        <button className=\"select-task-button\">\r\n          {isSelected ? \"Deselect\" : \"Select\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const calculateTimeSlot = (startTime, endTime) => {\r\n    const diff = new Date(endTime - startTime);\r\n    const hours = diff.getUTCHours();\r\n    const minutes = diff.getUTCMinutes();\r\n    return `${hours.toString().padStart(2, \"0\")}:${minutes\r\n      .toString()\r\n      .padStart(2, \"0\")}`;\r\n  };\r\n  \r\n  \r\n  const getPomodoroBackground = () => {\r\n    if (isFreeMode) return \"#d4b3e9\"; // Màu tím pastel cho chế độ tự do\r\n    switch (currentMode) {\r\n      case \"pomodoro\":\r\n        return \"#56daeb\"; // Xanh ngọc bích\r\n      case \"short-break\":\r\n        return \"#a8d5ba\"; // Xanh lá pastel\r\n      case \"long-break\":\r\n        return \"#f6e58d\"; // Vàng chanh\r\n      default:\r\n        return \"#f9f9f9\"; // Mặc định\r\n    }\r\n  };\r\n\r\n  const taskTimeSlotToSeconds = (timeSlot) => {\r\n    const [hours, minutes] = timeSlot.split(\":\").map(Number);\r\n    return hours * 3600 + minutes * 60;\r\n  };\r\n  \r\n  const handleModeChange = (newMode) => {\r\n    // Nếu chỉ thay đổi giữa pomodoro, short-break, long-break\r\n    if ([\"pomodoro\", \"short-break\", \"long-break\"].includes(newMode)) {\r\n      setCurrentMode(newMode); // Cập nhật chế độ hiện tại\r\n      if (newMode === \"pomodoro\") {\r\n        setTimeLeft(1500); // Reset thời gian 25 phút\r\n      } else if (newMode === \"short-break\") {\r\n        setTimeLeft(300); // Reset thời gian nghỉ ngắn 5 phút\r\n      } else if (newMode === \"long-break\") {\r\n        setTimeLeft(900); // Reset thời gian nghỉ dài 15 phút\r\n      }\r\n      return; // Thoát hàm mà không làm ảnh hưởng đến trạng thái khác\r\n    }\r\n  \r\n    // Nếu thay đổi giữa các chế độ auto, manual, free\r\n    setIsRunning(false); // Dừng tất cả các bộ đếm\r\n    setLastTaskStartTime(null); // Reset mốc thời gian bắt đầu\r\n    setTimeLeft(1500); // Reset thời gian Pomodoro về 25 phút\r\n    setFreeModeTime(0); // Reset thời gian đếm tự do về 0\r\n  \r\n    // Bỏ chọn task và record\r\n    setSelectedTaskName(null); // Hủy chọn task hiện tại\r\n    setIsTaskSelected(false); // Đặt lại trạng thái task đã chọn\r\n    setCurrentTaskManual(null); // Đặt lại task thủ công\r\n    setSelectedWork(null); // Đặt lại work được chọn\r\n    setSelectedTask(null); // Đặt lại task trong work\r\n    setTempWork(null); // Reset work tạm thời\r\n    setTempTask(null); // Reset task tạm thời\r\n    setCurrentRecord(null); // Bỏ chọn record hiện tại\r\n  \r\n    // Cập nhật chế độ\r\n    setMode(newMode);\r\n  };\r\n  \r\n  const handleToggleAutoSelect = () => {\r\n    // Kiểm tra nếu không phải chế độ \"auto\" thì chuyển sang \"auto\"\r\n    if (mode !== \"auto\") {\r\n        setMode(\"auto\");\r\n    }\r\n\r\n    // Đảo trạng thái của AutoSelect\r\n    setIsAutoSelectEnabled(prev => {\r\n        const newState = !prev;\r\n        if (newState) {\r\n            // Nếu bật AutoSelect\r\n            autoSelectTask(); // Tự động chọn task\r\n        }\r\n        return newState;\r\n    });\r\n};\r\n\r\n\r\n\r\n  const openManualSelectModal = () => {\r\n    setTempWork(selectedWork);\r\n    setTempTask(selectedTask);\r\n    setIsModalOpen(true);\r\n  };\r\n  \r\n  const handleManualSelectWork = (work) => {\r\n    setTempWork((prev) => (prev?.id === work.id ? null : work));\r\n    setTempTask(null);\r\n  };\r\n\r\n  const handleManualSelectTask = (task) => {\r\n    setTempTask((prev) => (prev?.name === task.name ? null : task));\r\n  };\r\n\r\n  const handleManualSelectionDone = () => {\r\n    setSelectedWork(tempWork);\r\n    setSelectedTask(tempTask);\r\n  \r\n    setCurrentTaskManual(\r\n      tempTask\r\n        ? {\r\n            ...tempTask,\r\n            workName: tempWork.name,\r\n            workStartDate: tempWork.startDate,\r\n            workEndDate: tempWork.endDate,\r\n            startTime: new Date(`1970-01-01T${tempTask.startTime}:00`),\r\n            endTime: new Date(`1970-01-01T${tempTask.endTime}:00`),\r\n          }\r\n        : null\r\n    );\r\n    if (tempTask) {\r\n      const taskTimeSlot = calculateTimeSlot(\r\n        new Date(`1970-01-01T${tempTask.startTime}:00`),\r\n        new Date(`1970-01-01T${tempTask.endTime}:00`)\r\n      );\r\n      setCountdownTimeTask(taskTimeSlotToSeconds(taskTimeSlot));\r\n      setIsTaskSelected(true);\r\n    } else {\r\n      setCountdownTimeTask(0);\r\n      setIsTaskSelected(false);\r\n    }\r\n    \r\n    setIsModalOpen(false);\r\n  };\r\n  \r\n\r\n  const closeModal = () => {\r\n    setTempWork(selectedWork);\r\n    setTempTask(selectedTask);\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const selectedTaskData = todayDataTimeCount.find(\r\n    (task) => task.name === selectedTaskName\r\n  );\r\n  \r\n  const percentCompleted = selectedTaskData\r\n    ? parseInt(selectedTaskData.status.replace('%', ''), 10)\r\n    : 0; // Nếu không tìm thấy, mặc định là 0\r\n    const sortedTodayDataTimeCount = useMemo(() => {\r\n      if (viewMode === \"byPercent\") {\r\n        return [...todayDataTimeCount].sort((a, b) => {\r\n          const percentA = parseInt(a.status.replace(\"%\", \"\"), 10);\r\n          const percentB = parseInt(b.status.replace(\"%\", \"\"), 10);\r\n    \r\n          if (percentA !== percentB) {\r\n            return percentB - percentA; // Sắp xếp theo phần trăm giảm dần\r\n          }\r\n    \r\n          if (a.totalTimeSlotInSeconds !== b.totalTimeSlotInSeconds) {\r\n            return b.totalTimeSlotInSeconds - a.totalTimeSlotInSeconds; // Sắp xếp theo timeslot giảm dần\r\n          }\r\n    \r\n          return a.name.localeCompare(b.name); // Sắp xếp theo thứ tự chữ cái\r\n        });\r\n      }\r\n      return todayDataTimeCount;\r\n    }, [todayDataTimeCount, viewMode]);\r\n\r\n  return (\r\n    <div className=\"main-form\" data-aos=\"zoom-in\">\r\n      <header className=\"search-bar\">\r\n        <h1>Focus</h1>\r\n      </header>\r\n\r\n      <div className=\"container-row\">\r\n      <div className=\"today-data-container\">\r\n    <button\r\n      className=\"today-data-toggle\"\r\n      onClick={() => setIsTodayDataVisible((prev) => !prev)}\r\n    >\r\n      TODAY-DataTimeCount ▼\r\n    </button>\r\n    {isTodayDataVisible && (\r\n      <div className=\"today-data-content\">\r\n        <div className=\"today-data-header\">\r\n          <p>Today: {new Date().toDateString()}</p>\r\n          <select\r\n            className=\"view-mode-selector\"\r\n            value={viewMode}\r\n            onChange={(e) => setViewMode(e.target.value)}\r\n          >\r\n            <option value=\"byTime\">By Time</option>\r\n            <option value=\"byPercent\">By Percent</option>\r\n          </select>\r\n        </div>\r\n        <ul>\r\n          {sortedTodayDataTimeCount.map((task, index) => (\r\n            <li key={index}>\r\n              {task.name}{\" \"}\r\n              <strong>\r\n                {formatTime(task.realTimeTaskCount)} / {task.timeSlot}\r\n              </strong>{\" \"}\r\n              <span>{task.status}</span> {/* Hiển thị phần trăm hoàn thành */}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )}\r\n  </div>\r\n\r\n      <div className=\"countdown-task\">\r\n        <div className=\"progress-bar-todaytask-container\">\r\n          <div\r\n            className=\"progress-bar-todaytask\"\r\n            style={{ width: `${Math.min(percentCompleted, 100)}%` }}\r\n          ></div>\r\n        </div>\r\n        {isTaskSelected ? (\r\n          <p className=\"countdown-text\">{formatTime(countdownTimeTask)}</p>\r\n        ) : (\r\n          <p className=\"countdown-text\">Select task!</p>\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n  <div className=\"focus-modes\">\r\n  <button\r\n    className={`focus-mode ${mode === \"auto\" ? \"active\" : \"\"}`}\r\n    onClick={() => handleModeChange(\"auto\")}\r\n  >\r\n    Tự động\r\n  </button>\r\n  <button\r\n    className={`focus-mode ${mode === \"manual\" ? \"active\" : \"\"}`}\r\n    onClick={() => {handleModeChange(\"manual\");\r\n    openManualSelectModal();\r\n  }}\r\n  >\r\n    Tự chọn\r\n  </button>\r\n  <button\r\n    className={`focus-mode ${mode === \"free\" ? \"active\" : \"\"}`}\r\n    onClick={() => handleModeChange(\"free\")}\r\n  >\r\n    Tự do\r\n  </button>\r\n</div>\r\n\r\n</div>\r\n\r\n\r\n<div className=\"focus-content\">\r\n  <div className=\"autoselect-container\">\r\n\r\n    <div className=\"autoselect-stats\">\r\n      <div className=\"autoselect-stat\">\r\n        <span className=\"stat-label\">Total Time:</span>\r\n        <span className=\"stat-value\">{formatTime(totalRealTime)}</span>\r\n      </div>\r\n      <div className=\"autoselect-stat\">\r\n        <span className=\"stat-label\">Completed:</span>\r\n        <span className=\"stat-value\">{`${completedTaskCount}/${totalTasks}`}</span>\r\n    </div>\r\n    <div className=\"autoselect-stat\">\r\n    <button\r\n    className={`autoselect-button ${isAutoSelectEnabled ? \"on\" : \"off\"}`}\r\n    onClick={handleToggleAutoSelect}\r\n>\r\n    {isAutoSelectEnabled ? \"ON\" : \"OFF\"}\r\n</button>\r\n\r\n    </div>\r\n  </div>\r\n\r\n    \r\n</div> {/* code for autoSelect end */}\r\n\r\n<div className=\"timeline-container\" ref={timelineRef}>\r\n  <div className=\"timeline\">\r\n    <div\r\n      className=\"current-time-line\"\r\n      style={{\r\n        \"--time-position\": `${currentTime.getHours() * 60 + currentTime.getMinutes()}px`,\r\n        top: `${currentTime.getHours() * 60 + currentTime.getMinutes() + 6.5}px`,\r\n      }}\r\n    ></div>\r\n    {Array.from({ length: 25 }).map((_, hour) => (\r\n      <div key={hour} className=\"hour-block\" style={{ top: `${hour * 60}px` }}>\r\n        <div className=\"hour-marker\">\r\n          {hour < 10 ? `0${hour}:00` : `${hour}:00`}\r\n        </div>\r\n        <div className=\"hour-divider\"></div>\r\n      </div>\r\n    ))}\r\n    {tasksForToday.map((task) => renderTaskOnTimeline(task))}\r\n  </div>\r\n</div> {/* code for timeline-container end */}\r\n\r\n\r\n{mode === \"auto\" && (\r\n  <div className=\"task-list\">\r\n          <h2>Today Task</h2>\r\n          <p>\r\n            Tổng số task: <strong>{tasksForToday.length}</strong>\r\n          </p>\r\n          {tasksForToday.length > 0 ? (\r\n            <table className=\"task-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Task</th>\r\n                  <th>Work</th>\r\n                  <th>Time</th>\r\n                  <th>TimeSlot</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tasksForToday.map((task, index) => {\r\n                  const timeSlot = calculateTimeSlot(task.startTime, task.endTime); // Tính TimeSlot\r\n                  return (\r\n                    <tr\r\n                      key={index}\r\n                      className={`task-list-item ${\r\n                        selectedTaskName === task.name ? \"selected\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleSelectTaskBlock(task.name)}\r\n                    >\r\n                      <td>{task.name}</td>\r\n                      <td>{task.workName || \"N/A\"}</td>\r\n                      <td>\r\n                        {task.startTime.toLocaleTimeString([], {\r\n                          hour: \"2-digit\",\r\n                          minute: \"2-digit\",\r\n                          hour12: false,\r\n                        })}{\" \"}\r\n                        -{\" \"}\r\n                        {task.endTime.toLocaleTimeString([], {\r\n                          hour: \"2-digit\",\r\n                          minute: \"2-digit\",\r\n                          hour12: false,\r\n                        })}\r\n                      </td>\r\n                      <td>{timeSlot}</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>Empty Task Today</p>\r\n          )}\r\n        </div> \r\n        \r\n)} {/* code for task-list of AUTO MODE end */}\r\n\r\n{mode === \"manual\"  && (\r\n        <div className=\"manual-mode-container\">\r\n    {/* Danh sách các task đã chọn */}\r\n    <div className=\"manual-selected-tasks\">\r\n      <h2>Selected Tasks</h2>\r\n      <ul>\r\n        {selectedTasksManual.map((task, index) => (\r\n          <li key={index}>\r\n            {task.name}: <strong>{formatTime(task.time)}</strong>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n\r\n    {/* Hộp \"task-select\" */}\r\n    <div className=\"task-select\">\r\n      <h2>Task hiện tại</h2>\r\n      <p>\r\n        <strong>Work:</strong> {currentTaskManual?.workName || \"N/A\"}\r\n      </p>\r\n      <p>\r\n        <strong>Task:</strong> {currentTaskManual?.name || \"N/A\"}\r\n      </p>\r\n      <p>\r\n        <strong>Thời gian:</strong>{\" \"}\r\n        {currentTaskManual?.startTime?.toLocaleTimeString([], {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          hour12: false,\r\n        }) || \"N/A\"}{\" \"}\r\n        -{\" \"}\r\n        {currentTaskManual?.endTime?.toLocaleTimeString([], {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          hour12: false,\r\n        }) || \"N/A\"}\r\n      </p>\r\n      <p>\r\n        <strong>Timeslot:</strong>{\" \"}\r\n        {currentTaskManual\r\n          ? calculateTimeSlot(\r\n              new Date(currentTaskManual.startTime),\r\n              new Date(currentTaskManual.endTime)\r\n            )\r\n          : \"N/A\"}\r\n      </p>\r\n    </div>\r\n  </div>\r\n)} {/* code for manualModecontainer Manual Mode end */}\r\n{mode === \"free\" && (\r\n  <div className=\"free-mode-container\">\r\n    {/* Phần bên trái */}\r\n    <div className=\"free-mode-left\">\r\n      <h2>New Record</h2>\r\n      <div className=\"record-creation\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter record name\"\r\n          value={recordNameInput}\r\n          onChange={(e) => setRecordNameInput(e.target.value)}\r\n        />\r\n        <button onClick={handleCreateRecord}>Create</button>\r\n      </div>\r\n      {currentRecord && (\r\n        <div className=\"current-record\">\r\n          <p>\r\n            <strong>Current Record:</strong> {currentRecord.name}\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n    </div>\r\n      \r\n    {/* Phần bên phải */}\r\n    <div className=\"free-mode-right\">\r\n      <h2>Records</h2>\r\n      <p>Total Time: {formatTime(totalFreeTime)}</p>\r\n      <ul>\r\n        {records.map((record, index) => (\r\n          <li\r\n            key={index}\r\n            className={record.name === currentRecord?.name ? \"active\" : \"\"}\r\n            onClick={() => handleSelectRecord(record.name)} // Xử lý chọn/bỏ chọn\r\n          >\r\n            <span>\r\n              {record.name}: {formatTime(record.time)}\r\n            </span>\r\n            <button\r\n              className=\"delete-record-button\"\r\n              onClick={(e) => {\r\n                e.stopPropagation(); // Ngăn không để sự kiện click lan lên li\r\n                handleDeleteRecord(record.name); // Xử lý xóa record\r\n              }}\r\n            >\r\n              X\r\n            </button>\r\n          </li>\r\n        \r\n        ))}\r\n      </ul>\r\n\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n\r\n\r\n<div className=\"note-container\">\r\n          <div className=\"note-header\">\r\n            <button\r\n              className=\"note-button\"\r\n              onClick={() => alert(\"Daily form is not implemented yet.\")}\r\n            >\r\n              Daily\r\n            </button>\r\n            <button className=\"note-button\" onClick={() => setNoteContent(\"\")}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n          <div className=\"note-body\">\r\n            <label htmlFor=\"note-input\" className=\"note-label\">Note</label>\r\n            <textarea\r\n              id=\"note-input\"\r\n              className=\"note-input\"\r\n              value={noteContent}\r\n              onChange={(e) => setNoteContent(e.target.value)}\r\n              placeholder=\"Write your notes here...\"\r\n            ></textarea>\r\n          </div>\r\n</div> {/* code for Note-container end */}\r\n\r\n\r\n\r\n {/* code for pomodoro and stopwatch start */}\r\n <div className=\"pomodoro-timer\" style={{ backgroundColor: getPomodoroBackground() }}>  \r\n  <div className=\"pomodoro-header\">\r\n    <span className=\"swap-icon\" onClick={toggleFreeMode}>\r\n      🔄\r\n    </span>\r\n    <div className=\"pomodoro-modes\">\r\n  {!isFreeMode ? (\r\n    <>\r\n      <span\r\n        className={`pomodoro-mode ${currentMode === \"pomodoro\" ? \"active\" : \"\"}`}\r\n        onClick={() => {\r\n          setCurrentMode(\"pomodoro\");\r\n          handleModeChange(\"pomodoro\");\r\n        }}\r\n      >\r\n        Pomodoro\r\n      </span>\r\n      <span\r\n        className={`pomodoro-mode ${currentMode === \"short-break\" ? \"active\" : \"\"}`}\r\n        onClick={() => {\r\n          setCurrentMode(\"short-break\");\r\n          handleModeChange(\"short-break\");\r\n        }}\r\n      >\r\n        Short-break\r\n      </span>\r\n      <span\r\n        className={`pomodoro-mode ${currentMode === \"long-break\" ? \"active\" : \"\"}`}\r\n        onClick={() => {\r\n          setCurrentMode(\"long-break\");\r\n          handleModeChange(\"long-break\");\r\n        }}\r\n      >\r\n        Long-break\r\n      </span>\r\n    </>\r\n  ) : (\r\n    <span\r\n  className={`pomodoro-mode ${isFreeMode ? \"active\" : \"\"}`}\r\n  onClick={() => {\r\n    if (!isFreeMode) {\r\n      toggleFreeMode();\r\n    } else {\r\n      setFreeModeTime(0);\r\n    }\r\n  }}\r\n>\r\n  Stopwatch\r\n</span>\r\n\r\n  )}\r\n</div>\r\n\r\n\r\n\r\n  </div>\r\n  <p>{formatTime(isFreeMode ? freeModeTime : timeLeft)}</p> {/* Hiển thị thời gian */}\r\n  <div className=\"timer-controls\">\r\n  <button\r\n  onClick={\r\n    isTaskSelected || currentRecord\r\n      ? handleStartPause\r\n      : () => toast.error(\"Please choose a task or record\")\r\n  }\r\n  disabled={!isTaskSelected && !currentRecord} // Không bật nút nếu không có Task hoặc Record\r\n>\r\n  {isRunning ? \"Tạm dừng\" : \"Bắt đầu\"}\r\n</button>\r\n\r\n\r\n    {isFreeMode && (\r\n      <button onClick={() => setFreeModeTime(0)}>Kết thúc</button>\r\n    )}\r\n    {!isFreeMode && <button onClick={handleSkip}>Bỏ qua</button>}\r\n  </div>\r\n</div>\r\n{/* code for pomodoro and stopwatch end */}\r\n\r\n\r\n\r\n</div> {/* code for FOCUS-CONTENT END */}\r\n\r\n\r\n\r\n      {isModalOpen && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-task-content\">\r\n            <div className=\"modal-left\">\r\n              <h2>Danh sách Work</h2>\r\n              {Object.values(works).flat().map((work) => (\r\n                <div\r\n                  key={work.id}\r\n                  className={`work-item-focus ${\r\n                    tempWork?.id === work.id ? \"active\" : \"\"\r\n                  }`}\r\n                  onClick={() => handleManualSelectWork(work)}\r\n                >\r\n                  <h4>{work.name}</h4>\r\n                  <p>\r\n                    Ngày: {work.startDate} - {work.endDate}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"divider\"></div>\r\n            <div className=\"modal-right\">\r\n              <div className=\"modal-buttons\">\r\n                <button className=\"focus-button\" onClick={handleManualSelectionDone}>\r\n                  Done\r\n                </button>\r\n                <button className=\"modal-close\" onClick={closeModal}>\r\n                  &times;\r\n                </button>\r\n              </div>\r\n              <h2>Danh sách Task</h2>\r\n              {tempWork && tempWork.subWorks ? (\r\n                <>\r\n                  {tempWork.subWorks.map((task, index) => (\r\n                    <div\r\n                      key={index}\r\n                      className={`task-item-focus ${\r\n                        tempTask?.name === task.name ? \"active\" : \"\"\r\n                      }`}\r\n                      onClick={() => handleManualSelectTask(task)}\r\n                    >\r\n                      <h4>{task.name}</h4>\r\n                      <p>\r\n                        Thời gian: {task.startTime} - {task.endTime}\r\n                      </p>\r\n                    </div>\r\n                  ))}\r\n                </>\r\n              ) : (\r\n                <p>Chọn một Work để xem Task.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n    </div> //div of main-form\r\n  );\r\n};\r\n\r\nexport default Focus;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}