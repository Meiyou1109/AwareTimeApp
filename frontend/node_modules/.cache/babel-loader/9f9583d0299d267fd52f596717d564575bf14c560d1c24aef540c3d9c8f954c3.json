{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\meiyoudg\\\\source\\\\repos\\\\AwareTime\\\\frontend\\\\src\\\\components\\\\Focus.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport \"./styles/focus.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Focus = ({\n  works = {},\n  toast\n}) => {\n  _s();\n  const [mode, setMode] = useState(\"auto\");\n  const [selectedWork, setSelectedWork] = useState(null);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [tempWork, setTempWork] = useState(null);\n  const [tempTask, setTempTask] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(1500);\n  const [isRunning, setIsRunning] = useState(false);\n  const [cycle, setCycle] = useState(0);\n  const [isFocusPhase, setIsFocusPhase] = useState(true);\n  const [tasksForToday, setTasksForToday] = useState([]);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const timelineRef = useRef(null);\n  const [selectedTaskName, setSelectedTaskName] = useState(null);\n  const [noteContent, setNoteContent] = useState(\"\");\n  const [isFreeMode, setIsFreeMode] = useState(false);\n  const [freeModeTime, setFreeModeTime] = useState(0);\n  const [currentMode, setCurrentMode] = useState(\"pomodoro\");\n  const [countdownTimeTask, setCountdownTimeTask] = useState(0);\n  const [isTaskSelected, setIsTaskSelected] = useState(false);\n  const [todayDataTimeCount, setTodayDataTimeCount] = useState([]);\n  const [isTodayDataVisible, setIsTodayDataVisible] = useState(false);\n  const [lastTaskStartTime, setLastTaskStartTime] = useState(null);\n  const intervalRef = useRef(null);\n\n  // Functions that were not defined are now assumed to be placeholders\n  const openManualSelectModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleManualSelectWork = work => {\n    setTempWork(work);\n  };\n  const handleManualSelectTask = task => {\n    setTempTask(task);\n  };\n  const handleManualSelectionDone = () => {\n    setSelectedWork(tempWork);\n    setSelectedTask(tempTask);\n    closeModal();\n  };\n  const handleSelectTaskBlock = taskName => {\n    setSelectedTaskName(taskName);\n    setIsTaskSelected(true);\n  };\n  const handleSkip = () => {\n    // Logic for skipping the current phase\n  };\n  const handleModeChange = mode => {\n    setCurrentMode(mode);\n    switch (mode) {\n      case \"pomodoro\":\n        setTimeLeft(1500);\n        break;\n      case \"short-break\":\n        setTimeLeft(300);\n        break;\n      case \"long-break\":\n        setTimeLeft(900);\n        break;\n      default:\n        setTimeLeft(1500);\n      // Default to standard Pomodoro time if unexpected mode\n    }\n    setIsRunning(false); // Stop the timer on mode change\n  };\n  const getPomodoroBackground = () => {\n    if (isFreeMode) return \"#d4b3e9\";\n    switch (currentMode) {\n      case \"pomodoro\":\n        return \"#56daeb\";\n      case \"short-break\":\n        return \"#a8d5ba\";\n      case \"long-break\":\n        return \"#f6e58d\";\n      default:\n        return \"#f9f9f9\";\n    }\n  };\n  const renderTaskOnTimeline = task => {\n    // This should return some JSX to render tasks on the timeline\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n    return () => clearInterval(timer);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openManualSelectModal,\n      children: \"Open Modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"pomodoro\"),\n      children: \"Set Pomodoro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"short-break\"),\n      children: \"Set Short Break\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleModeChange(\"long-break\"),\n      children: \"Set Long Break\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), tasksForToday.map(task => renderTaskOnTimeline(task)), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualSelectionDone,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeModal,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: getPomodoroBackground()\n      },\n      children: [\"Time left: \", timeLeft, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Focus, \"5qj0Hq2RsdOgWLmPDrnk7vbolu4=\");\n_c = Focus;\nexport default Focus;\nvar _c;\n$RefreshReg$(_c, \"Focus\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useRef","jsxDEV","_jsxDEV","Focus","works","toast","_s","mode","setMode","selectedWork","setSelectedWork","selectedTask","setSelectedTask","isModalOpen","setIsModalOpen","tempWork","setTempWork","tempTask","setTempTask","timeLeft","setTimeLeft","isRunning","setIsRunning","cycle","setCycle","isFocusPhase","setIsFocusPhase","tasksForToday","setTasksForToday","currentTime","setCurrentTime","Date","timelineRef","selectedTaskName","setSelectedTaskName","noteContent","setNoteContent","isFreeMode","setIsFreeMode","freeModeTime","setFreeModeTime","currentMode","setCurrentMode","countdownTimeTask","setCountdownTimeTask","isTaskSelected","setIsTaskSelected","todayDataTimeCount","setTodayDataTimeCount","isTodayDataVisible","setIsTodayDataVisible","lastTaskStartTime","setLastTaskStartTime","intervalRef","openManualSelectModal","closeModal","handleManualSelectWork","work","handleManualSelectTask","task","handleManualSelectionDone","handleSelectTaskBlock","taskName","handleSkip","handleModeChange","getPomodoroBackground","renderTaskOnTimeline","children","name","fileName","_jsxFileName","lineNumber","columnNumber","timer","setInterval","clearInterval","className","onClick","map","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/meiyoudg/source/repos/AwareTime/frontend/src/components/Focus.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport \"./styles/focus.css\";\r\n\r\nconst Focus = ({ works = {}, toast }) => {\r\n  const [mode, setMode] = useState(\"auto\");\r\n  const [selectedWork, setSelectedWork] = useState(null);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [tempWork, setTempWork] = useState(null);\r\n  const [tempTask, setTempTask] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(1500);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [cycle, setCycle] = useState(0);\r\n  const [isFocusPhase, setIsFocusPhase] = useState(true);\r\n  const [tasksForToday, setTasksForToday] = useState([]);\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const timelineRef = useRef(null);\r\n  const [selectedTaskName, setSelectedTaskName] = useState(null);\r\n  const [noteContent, setNoteContent] = useState(\"\");\r\n  const [isFreeMode, setIsFreeMode] = useState(false);\r\n  const [freeModeTime, setFreeModeTime] = useState(0);\r\n  const [currentMode, setCurrentMode] = useState(\"pomodoro\");\r\n  const [countdownTimeTask, setCountdownTimeTask] = useState(0);\r\n  const [isTaskSelected, setIsTaskSelected] = useState(false);\r\n  const [todayDataTimeCount, setTodayDataTimeCount] = useState([]);\r\n  const [isTodayDataVisible, setIsTodayDataVisible] = useState(false);\r\n  const [lastTaskStartTime, setLastTaskStartTime] = useState(null);\r\n  const intervalRef = useRef(null);\r\n\r\n  // Functions that were not defined are now assumed to be placeholders\r\n  const openManualSelectModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  const handleManualSelectWork = (work) => {\r\n    setTempWork(work);\r\n  };\r\n\r\n  const handleManualSelectTask = (task) => {\r\n    setTempTask(task);\r\n  };\r\n\r\n  const handleManualSelectionDone = () => {\r\n    setSelectedWork(tempWork);\r\n    setSelectedTask(tempTask);\r\n    closeModal();\r\n  };\r\n\r\n  const handleSelectTaskBlock = (taskName) => {\r\n    setSelectedTaskName(taskName);\r\n    setIsTaskSelected(true);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    // Logic for skipping the current phase\r\n  };\r\n\r\n  const handleModeChange = (mode) => {\r\n    setCurrentMode(mode);\r\n    switch (mode) {\r\n      case \"pomodoro\":\r\n        setTimeLeft(1500);\r\n        break;\r\n      case \"short-break\":\r\n        setTimeLeft(300);\r\n        break;\r\n      case \"long-break\":\r\n        setTimeLeft(900);\r\n        break;\r\n      default:\r\n        setTimeLeft(1500); // Default to standard Pomodoro time if unexpected mode\r\n    }\r\n    setIsRunning(false); // Stop the timer on mode change\r\n  };\r\n\r\n  const getPomodoroBackground = () => {\r\n    if (isFreeMode) return \"#d4b3e9\";\r\n    switch (currentMode) {\r\n      case \"pomodoro\":\r\n        return \"#56daeb\";\r\n      case \"short-break\":\r\n        return \"#a8d5ba\";\r\n      case \"long-break\":\r\n        return \"#f6e58d\";\r\n      default:\r\n        return \"#f9f9f9\";\r\n    }\r\n  };\r\n\r\n  const renderTaskOnTimeline = (task) => {\r\n    // This should return some JSX to render tasks on the timeline\r\n    return <div>{task.name}</div>;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 60000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"main-form\">\r\n      <button onClick={openManualSelectModal}>Open Modal</button>\r\n      <button onClick={() => handleModeChange(\"pomodoro\")}>Set Pomodoro</button>\r\n      <button onClick={() => handleModeChange(\"short-break\")}>Set Short Break</button>\r\n      <button onClick={() => handleModeChange(\"long-break\")}>Set Long Break</button>\r\n      {tasksForToday.map((task) => renderTaskOnTimeline(task))}\r\n      {isModalOpen && (\r\n        <div>\r\n          <button onClick={handleManualSelectionDone}>Done</button>\r\n          <button onClick={closeModal}>Close</button>\r\n        </div>\r\n      )}\r\n      <div style={{ backgroundColor: getPomodoroBackground() }}>\r\n        Time left: {timeLeft} seconds\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Focus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}